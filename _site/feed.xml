<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bencode@编码</title>
    <description></description>
    <link>http://bencode.github.io/</link>
    <atom:link href="http://bencode.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 13 Feb 2015 14:03:11 +0800</pubDate>
    <lastBuildDate>Fri, 13 Feb 2015 14:03:11 +0800</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>常用的nodejs package</title>
        <description>&lt;p&gt;收集工具类nodejs package，避免造轮子&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;工具&lt;/h2&gt;

&lt;h3 id=&quot;path-to-regexp&quot;&gt;path-to-regexp&lt;/h3&gt;

&lt;h2 id=&quot;section-1&quot;&gt;模板应擎&lt;/h2&gt;

&lt;h3 id=&quot;swig&quot;&gt;swig&lt;/h3&gt;
</description>
        <pubDate>Sat, 06 Jun 2015 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/javascript/common-node-js-package.html</link>
        <guid isPermaLink="true">http://bencode.github.io/javascript/common-node-js-package.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>关于nodejs中版本号</title>
        <description>&lt;p&gt;我们开始尝试在正式环境使用node，所以对二方包和三方包的稳定性和一致性会有更高的要求。&lt;/p&gt;

&lt;p&gt;node package中包的依赖是通过package.json中的dependencies字段申明的， 其信息包括模块名和版本号（区域）。&lt;br /&gt;
但其表达方式可能比较复杂，如  ~1.2.3 或  ^ 1.2.3 或 1.2.x 等，可能有些同学不是非常清楚。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;1. 关于版本号&lt;/h2&gt;

&lt;p&gt;node package使用的是一个版本规范：http://semver.org/lang/zh-CN/&lt;/p&gt;

&lt;p&gt;总的来说是这样的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;版本格式：主版本号.次版本号.修订号，版本号递增规则如下：

主版本号：当你做了不兼容的API 修改，
次版本号：当你做了向下兼容的功能性新增，
修订号：当你做了向下兼容的问题修正。
先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大家可以看一下这个文章，讲得很清楚&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;2. 关于模块依赖&lt;/h2&gt;

&lt;p&gt;node package使用的依赖都是描述在 package.json中的 dependencies属性中&lt;/p&gt;

&lt;p&gt;比如:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ &quot;dependencies&quot; :
  { &quot;foo&quot; : &quot;1.0.0 - 2.9999.9999&quot;
  , &quot;bar&quot; : &quot;&amp;gt;=1.0.2 &amp;lt;2.1.2&quot;
  , &quot;baz&quot; : &quot;&amp;gt;1.0.2 &amp;lt;=2.3.4&quot;
  , &quot;boo&quot; : &quot;2.0.1&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;大部分的描述都比较直观。 但有些特别语法描述，如果不知道还真不知道。&lt;/p&gt;

&lt;p&gt;比如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ &quot;dependencies&quot; :
  { &quot;til&quot; : &quot;~1.2&quot;, 
    &quot;elf&quot; : “^1.2.3”
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在依赖中，除了可以直接写死版本号外，还可以灵活地指定 版本区域。  &lt;/p&gt;

&lt;p&gt;大概像这样&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.2.3       明确的版本

&amp;gt;1.2.3     表示 大于1.2.3,  相似的有:
&amp;lt;1.2.3
&amp;gt;=1.2.3
&amp;lt;=1.2.3

1.2.3 - 2.3.4   表示  &amp;gt;=1.2.3且&amp;lt;=2.3.4

~1.2.3    表示 &amp;gt;=1.2.3  且 &amp;lt;1.3.0   语义上的意思是：接近1.2.3

^1.2.3  表示  &amp;gt;=1.2.3  且 &amp;lt;2.0.0    语义上的意思是：与1.2.3兼容的版本  

1.2.x  这个好理解， 就是 &amp;gt;=1.2.0 &amp;lt;1.3.0  
1.2.*   和上面一样
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;现在应该统统看得懂了，具体的可以参考：&lt;br /&gt;
https://www.npmjs.org/doc/misc/semver.html&lt;/p&gt;

&lt;p&gt;同时，如果要在代码中进行这样的版本处理，可以直接使用semver这个模块&lt;/p&gt;

&lt;p&gt;https://github.com/isaacs/node-semver&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;3. 关于版本的使用&lt;/h2&gt;

&lt;p&gt;虽然版本号申明方式很灵活，但是在正式的应用中， 我觉得 二方包和三方包，都应使用明确的 版本号，而不是模糊匹配。&lt;br /&gt;
这样多人开发时和发布上线时，就可以保证依赖包代码是一致的，可以避免很多问题&lt;/p&gt;

&lt;h2 id=&quot;package&quot;&gt;4. 关于package&lt;/h2&gt;

&lt;p&gt;关于包的一些资料：&lt;/p&gt;

&lt;p&gt;(1) package.json的说明&lt;br /&gt;
https://www.npmjs.org/doc/files/package.json.html&lt;/p&gt;

&lt;p&gt;(2) 怎么样的东西可以被npm install，即package是什么&lt;/p&gt;

&lt;p&gt;https://www.npmjs.org/doc/cli/npm-install.html&lt;/p&gt;

&lt;p&gt;(2) 什么样的东西可以被 require，即 module是什么&lt;/p&gt;

&lt;p&gt;http://nodejs.org/api/modules.html#modules_modules&lt;/p&gt;

</description>
        <pubDate>Thu, 08 Jan 2015 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/javascript/about-version.html</link>
        <guid isPermaLink="true">http://bencode.github.io/javascript/about-version.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>《黑客与画家》读书笔记（第二章）</title>
        <description>&lt;p&gt;黑客与画家的共同之处，在于他们都是创作者。他们的本质都不是在做研究。&lt;/p&gt;

&lt;p&gt;计算机科学应该由三部分组成： 1. 数学家  2. 计算机科学家 3. 黑客&lt;/p&gt;

&lt;p&gt;黑客的最高境界是创造规格&lt;/p&gt;

&lt;p&gt;创造优美的事物的方式往往不是从头做起，而是在现有成果的基础上做一些小小的调整。&lt;/p&gt;

&lt;p&gt;人们无法考核你的工作，甚至误解你的工作，这些都不是最糟的事。更大的危险是你自己也误解自己的工作。&lt;/p&gt;

&lt;p&gt;“我不是耐心地一步步写出整个程序，确保大体上是正确的，而是一股脑不管对错，先把代码堆上去，再慢慢修改”，编程就是调试&lt;/p&gt;

&lt;p&gt;你把整个程序想清楚的时间点，应该是在编写代码的同时，而不是编写代码之前&lt;/p&gt;

&lt;p&gt;编程语言是用来帮助思考程序的，而不是用来表达你已想好的程序。&lt;/p&gt;

&lt;p&gt;开发优秀的方式之一就是自己创业&lt;/p&gt;

&lt;p&gt;赚钱的软件往往不是好玩的软件&lt;/p&gt;

&lt;p&gt;解决生计问题的方法是找一份“白天工作”，然后在其余时间开发优美的软件&lt;/p&gt;

&lt;p&gt;通过实践学习编程，通过范例学习编程&lt;/p&gt;

&lt;p&gt;定期地从头开始，而不要长年累月地在一个项目上不断工作，并且试图把所有的最新想法都以修订版的形式包括进去&lt;/p&gt;

&lt;p&gt;黑客的出发点的是原创，最终得到一个优美的结果；而科学家的出发点是别人优美的结果，最终得到原创性。&lt;/p&gt;

&lt;p&gt;一副画是逐步完成的，你不能盼望先有一个完美的设计，然后再动手编程，如果你预先承认设计是不完美的，在编程的时间，就可以根据需求当场修改，最终会有一个更好的结果。&lt;/p&gt;

&lt;p&gt;过早优先是一件危险的事情，过早设计也有同样的担忧&lt;/p&gt;

&lt;p&gt;最容易修改的语言就是简短的语言&lt;/p&gt;

&lt;p&gt;一幅优秀的绘画作品必须比它应该有的样子更好&lt;/p&gt;

&lt;p&gt;有些工作需要投入巨大的热情，另一些工作则是不需要很操心的日常琐事。在你厌倦的时候再去做那些比较容易的工作。比如“写代码”和“改bug”&lt;/p&gt;

&lt;p&gt;当多个画家共同创作一幅作品时，每个人画的部分都是不一样的。通常来说，大师负责画主要人物，助手们负责画次要人物和背景。但是，你肯定找不到某个部分是两个人一起画的。&lt;/p&gt;

&lt;p&gt;“需要合作，但不要合得过头”&lt;/p&gt;

&lt;p&gt;正确的合作方法是将项目分割成严格定义的模块，每一个模块由一个人明确负责。模块与模块之间的接口经过精心设计，如果可能的话，最好把文档说明写得像编程语言规范那样清晰。&lt;/p&gt;

&lt;p&gt;必须能够站在用户的角度思考问题，必须学会“换位思考”&lt;/p&gt;

&lt;p&gt;程序写出来是给人看的，附带能在机器上运行&lt;/p&gt;

&lt;p&gt;编程到底能够有多酷，取决于我们能够用这种新媒介做出怎样的工作&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/hackers/and/painters/c2.html</link>
        <guid isPermaLink="true">http://bencode.github.io/hackers/and/painters/c2.html</guid>
        
        
        <category>hackers</category>
        
        <category>and</category>
        
        <category>painters</category>
        
      </item>
    
      <item>
        <title>git最佳实践</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;关于提交&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;1. 经常提交，并让每个提交尽量小，提交的内容只包含&lt;strong&gt;相关&lt;/strong&gt;改动。&lt;/h3&gt;

&lt;p&gt;比如2个bug，一次性改完，那也要分两次提交，可以配合使用stash来达到目的。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;2. 提交时&lt;strong&gt;必须&lt;/strong&gt;带上相应的描述，格式如下&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;标签: 简短描述

这里是提交的详细描述
可以说明为什么要这么修改，是如何解决问题的
以及这些变化可能会影响到的点
这些信息用于方便review，很可能下一个看的就是自己

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-3&quot;&gt;3. 关于简短描述&lt;/h3&gt;
&lt;p&gt;只用一句话说明本次所作的提交  &lt;br /&gt;
  如果一句话说不清楚，那有可能这个提交得拆分成多次提交，这有点像方法重构。  &lt;br /&gt;
  很多文章中建议这里不要超过50个字符，而且那指的是英文，汉字表达能力更足，应该20个字就搞定了。  &lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;4. 关于类别&lt;/h3&gt;
&lt;p&gt;这一点是我使用过程中感觉很有用的一点，不过对于不同类型的仓库，可能会定义不同的tag。我常用的tag有&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fix: 修改了某个bug&lt;/li&gt;
  &lt;li&gt;Add: 添加新特性&lt;/li&gt;
  &lt;li&gt;Change: 修改某些特性&lt;/li&gt;
  &lt;li&gt;Update: 更新依赖库造成的修改&lt;/li&gt;
  &lt;li&gt;Remove: 去掉了某些特性&lt;/li&gt;
  &lt;li&gt;Refactor: 重构代码(指的是不修改代码功能，优化代码结构)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其它不同的仓库有不同的规范，比如nodejs源码的提交，往往会带上修改的包名，比如src, test等。  &lt;br /&gt;
强列建议看看一些优秀仓库的提交log, 比如git本身就是很好的例子&lt;/p&gt;

&lt;h3 id=&quot;m&quot;&gt;5. 关于-m参数&lt;/h3&gt;
&lt;p&gt;为了能让提交时不仅仅出现“fix”, “ci”等无用注释，建议&lt;strong&gt;永远不要带上 -m 参数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用 git commit [-a] &lt;enter&gt;, 系统会弹出编辑器让你写。 所以建议好好配置一下git的外置编辑器&lt;/enter&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;6. 描述后面的空行很重要，它会一些自动化脚本提供支持&lt;/h3&gt;

&lt;h3 id=&quot;section-6&quot;&gt;相关文档&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://ruby-china.org/topics/15737&lt;/li&gt;
  &lt;li&gt;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&lt;/li&gt;
  &lt;li&gt;http://web-design-weekly.com/2013/09/01/a-better-git-commit/&lt;/li&gt;
  &lt;li&gt;http://ablogaboutcode.com/2011/03/23/proper-git-commit-messages-and-an-elegant-git-history/&lt;/li&gt;
  &lt;li&gt;https://github.com/erlang/otp/wiki/Writing-good-commit-messages&lt;/li&gt;
  &lt;li&gt;http://robots.thoughtbot.com/5-useful-tips-for-a-better-commit-message&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-7&quot;&gt;关于分支&lt;/h2&gt;

</description>
        <pubDate>Tue, 23 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/git/best-practice.html</link>
        <guid isPermaLink="true">http://bencode.github.io/git/best-practice.html</guid>
        
        
        <category>git</category>
        
      </item>
    
      <item>
        <title>Hammer.js默认情况下会preventDefault的解决</title>
        <description>&lt;p&gt;默认情况下, hammer.js会preventDefault，这会阻止原生的滚动等行为。&lt;br /&gt;
这在大多数情况下没什么问题，但有些情况下我们需要这类行为时，由于它没有开放相应的参数，就比较麻烦。&lt;/p&gt;

&lt;p&gt;不过也不是不能解决，通过阅读源码，找到以下解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var mc = new Hammer.Manager();
mc.add(...)

mc.touchAction.preventSrc = function() {
    // 什么都不做
};
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Sat, 20 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/javascript/hammer-prevent-default.html</link>
        <guid isPermaLink="true">http://bencode.github.io/javascript/hammer-prevent-default.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>nginx配置error_page</title>
        <description>&lt;p&gt;官网文档：&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#error_page&quot;&gt;查看&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;注意点是，如果error_page指向的页面是一个远程地址，如http://demo.com/errorpage.html&lt;br /&gt;
那默认页面会进行302跳转，而不管原来的状态码。&lt;/p&gt;

&lt;p&gt;如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;error_page 404      http://demo.com/404.html;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则nginx会302到以上页面，这样会对SEO有影响，我们希望实现对页面进行代理请求&lt;/p&gt;

&lt;p&gt;此时可以配合proxy-pass做一个中间层&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location / {
    error_page 404 /404;
}

location /404 {
    proxy_pass http://demo.com/404.html;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文档中有这样的例子，但是我试过无效果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location / {
    error_page 404 = @fallback;
}

location @fallback {
    proxy_pass http://backend;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会出现指令出错。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
nginx: [emerg] &quot;proxy_pass&quot; cannot have URI part in location given by regular expression, or inside named location, or inside &quot;if&quot; statement, or inside &quot;limit_except&quot; block in
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/nginx/error_page.html</link>
        <guid isPermaLink="true">http://bencode.github.io/nginx/error_page.html</guid>
        
        
        <category>nginx</category>
        
      </item>
    
      <item>
        <title>eclipse review</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;一些名词&lt;/h2&gt;

&lt;p&gt;plug-ins&lt;/p&gt;

&lt;p&gt;structed bundle of code and/or data to contribute functionality to system&lt;/p&gt;

&lt;p&gt;extensions extension-point&lt;/p&gt;

&lt;p&gt;JDT PDE&lt;/p&gt;

&lt;h2 id=&quot;runtime&quot;&gt;Runtime&lt;/h2&gt;

&lt;p&gt;manifest -&amp;gt; registry&lt;/p&gt;

&lt;p&gt;plugin = bundle&lt;/p&gt;

&lt;p&gt;定义在 org.eclipse.osgi and org.eclipse.core.runtime&lt;/p&gt;

&lt;p&gt;定义插件结构，实现加载策略&lt;/p&gt;

&lt;p&gt;找到并执行应用，维护plugin registry, extension and extension point&lt;/p&gt;

&lt;p&gt;提供一些基础设施：日志，调试，adapter，preference store，concurrency基础设施&lt;/p&gt;

&lt;p&gt;Bundle&lt;/p&gt;

&lt;p&gt;BundleActivator&lt;br /&gt;
  start(BundleContext)&lt;br /&gt;
  stop(BundleContext)&lt;/p&gt;

&lt;p&gt;BundleEvent&lt;br /&gt;
BundleContext&lt;/p&gt;

&lt;p&gt;Extension ExtensionPoint ExtensionRegistry&lt;/p&gt;

&lt;p&gt;ConfigurationElement&lt;/p&gt;

&lt;p&gt;Platform&lt;/p&gt;

&lt;h2 id=&quot;workbench&quot;&gt;Workbench&lt;/h2&gt;

&lt;p&gt;Workbench(WorkbenchWindow)&lt;/p&gt;

&lt;p&gt;Ppage: for group part&lt;/p&gt;

&lt;p&gt;Workbench&lt;br /&gt;
  - Page&lt;br /&gt;
    - MenuBar&lt;br /&gt;
    - ToolBar&lt;br /&gt;
    - StausLine&lt;br /&gt;
    - ShotcutBar&lt;/p&gt;

&lt;p&gt;Perspective:&lt;br /&gt;
  views, layout, actions&lt;/p&gt;

&lt;p&gt;切换perspective时,editor不受影响&lt;/p&gt;

&lt;p&gt;Part&lt;br /&gt;
1. ViewPart&lt;br /&gt;
2. EditPart: save-close lifecycle&lt;/p&gt;

&lt;p&gt;View and Editor&lt;/p&gt;

&lt;p&gt;createPartControl&lt;br /&gt;
setFocus&lt;br /&gt;
dispose&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/eclipse/review.html</link>
        <guid isPermaLink="true">http://bencode.github.io/eclipse/review.html</guid>
        
        
        <category>eclipse</category>
        
      </item>
    
      <item>
        <title>iframe自适应高度</title>
        <description>&lt;p&gt;这两天项目中需要，上网搜了一把找到一大堆，最后使用下面的方案。&lt;br /&gt;
发现一个问题，就是onload时再触发有点太慢了，可以改用domready等事件，还好我这个自适应不在线上使用，只存在开发环境下的mock。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var fn = function() {
  try {
    var bHeight = iframe.contentWindow.document.body.scrollHeight;
    var dHeight = iframe.contentWindow.document.documentElement.scrollHeight;
    var height = Math.max(bHeight, dHeight);
    if (height) {
      iframe.height = height;
    }
    setTimeout(fn, 200);
  } catch (e) {
    console.error(e);
  }
};

fn();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;http://www.cnblogs.com/MaxIE/archive/2008/08/13/1266597.html&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/web/iframe-autoresize.html</link>
        <guid isPermaLink="true">http://bencode.github.io/web/iframe-autoresize.html</guid>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>child_process的同步方法execSync</title>
        <description>&lt;p&gt;node中通过child_processt和shell交互很方便，只是0.10.x版本中的exec没有同步版本，让做“脚本”用途的node写起来很是麻烦。&lt;br /&gt;
而在0.11.12版本后添加了execSync方法解决了这个问题。&lt;/p&gt;

&lt;p&gt;首先node版本要到0.11.12以上才有这个api，可以使用n进行快速安装&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;sudo npm install -g n
n 0.11.14   // 到目前为止，已有0.11.14版了
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就可以使用了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var exec = require(&#39;child_process&#39;).execSync;
exec(&#39;git log&#39;, { encoding: &#39;utf-8&#39; });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行一下，就发现控制台有git log的输出了 &lt;br /&gt;
上面在options中指定了encoding, 如果不指定，返回的是一个&lt;code&gt;Buffer&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 11 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/nodejs/exec-sync.html</link>
        <guid isPermaLink="true">http://bencode.github.io/nodejs/exec-sync.html</guid>
        
        
        <category>nodejs</category>
        
      </item>
    
      <item>
        <title>Polymer学习笔记 - HTML5 Template</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.html5rocks.com/zh/tutorials/webcomponents/template/&quot;&gt;参考资料&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;特性检测&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function supportTemplate() {
  return &#39;content&#39; in document.createElement(&#39;template&#39;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-1&quot;&gt;声明模板内容&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template id=&quot;mytemplate&quot;&amp;gt;
  &amp;lt;img src=&quot;&quot; alt=&quot;great image&quot;&amp;gt;
  &amp;lt;div class=&quot;comment&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-2&quot;&gt;特性&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;模板内容在激活前不会被渲染&lt;/li&gt;
  &lt;li&gt;处于模板中的内容无副作用&lt;/li&gt;
  &lt;li&gt;处理模板中的内容不在文档中&lt;/li&gt;
  &lt;li&gt;模板可以放置在任意位置，包括&lt;code&gt;&amp;lt;head&amp;gt;, &amp;lt;body&amp;gt;, &amp;lt;frameset&amp;gt;&lt;/code&gt;&lt;br /&gt;
  并且任何能够出现在以上节点中的内容都可以出现在&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;中&lt;br /&gt;
  template能够安全地出现在html解析器不允许出现的位置，几乎可以作为任何内容的子节点，如&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-3&quot;&gt;激活&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var t = document.querySelector(&#39;#mytemplate&#39;)
t.content.querySelector(&#39;img&#39;).src = &#39;logo.png&#39;;

var clone = document.importNode(t.content, true);
document.body.appendChild(clone);
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/reading/polymer/template.html</link>
        <guid isPermaLink="true">http://bencode.github.io/reading/polymer/template.html</guid>
        
        
        <category>reading</category>
        
        <category>polymer</category>
        
      </item>
    
  </channel>
</rss>
