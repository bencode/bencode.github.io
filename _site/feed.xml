<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bencode@编码</title>
    <description></description>
    <link>http://bencode.github.io/</link>
    <atom:link href="http://bencode.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 15 Nov 2014 11:00:47 +0800</pubDate>
    <lastBuildDate>Sat, 15 Nov 2014 11:00:47 +0800</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>［译］Shadow DOM 101</title>
        <description>&lt;p&gt;正在进行中…&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/translation/shadow-dom-101.html</link>
        <guid isPermaLink="true">http://bencode.github.io/translation/shadow-dom-101.html</guid>
        
        
        <category>translation</category>
        
      </item>
    
      <item>
        <title>child_process的同步方法execSync</title>
        <description>&lt;p&gt;node中通过child_processt和shell交互很方便，只是0.10.x版本中的exec没有同步版本，让做“脚本”用途的node写起来很是麻烦。&lt;br /&gt;
而在0.11.12版本后添加了execSync方法解决了这个问题。&lt;/p&gt;

&lt;p&gt;首先node版本要到0.11.12以上才有这个api，可以使用n进行快速安装&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;sudo npm install -g n
n 0.11.14   // 到目前为止，已有0.11.14版了
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就可以使用了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var exec = require(&#39;child_process&#39;).execSync;
exec(&#39;git log&#39;, { encoding: &#39;utf-8&#39; });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行一下，就发现控制台有git log的输出了 &lt;br /&gt;
上面在options中指定了encoding, 如果不指定，返回的是一个&lt;code&gt;Buffer&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 11 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/nodejs/exec-sync.html</link>
        <guid isPermaLink="true">http://bencode.github.io/nodejs/exec-sync.html</guid>
        
        
        <category>nodejs</category>
        
      </item>
    
      <item>
        <title>mruby源码阅读1</title>
        <description>&lt;p&gt;include/mrbconf.h&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;define FALSE 0
define TRUE 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;include/mrb/value.h&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sun, 09 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/codereading/ruby/mruby-01.html</link>
        <guid isPermaLink="true">http://bencode.github.io/codereading/ruby/mruby-01.html</guid>
        
        
        <category>codereading</category>
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Polymer学习笔记 - HTML5 Template</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.html5rocks.com/zh/tutorials/webcomponents/template/&quot;&gt;参考资料&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;特性检测&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function supportTemplate() {
  return &#39;content&#39; in document.createElement(&#39;template&#39;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-1&quot;&gt;声明模板内容&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template id=&quot;mytemplate&quot;&amp;gt;
  &amp;lt;img src=&quot;&quot; alt=&quot;great image&quot;&amp;gt;
  &amp;lt;div class=&quot;comment&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-2&quot;&gt;特性&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;模板内容在激活前不会被渲染&lt;/li&gt;
  &lt;li&gt;处于模板中的内容无副作用&lt;/li&gt;
  &lt;li&gt;处理模板中的内容不在文档中&lt;/li&gt;
  &lt;li&gt;模板可以放置在任意位置，包括&lt;code&gt;&amp;lt;head&amp;gt;, &amp;lt;body&amp;gt;, &amp;lt;frameset&amp;gt;&lt;/code&gt;&lt;br /&gt;
  并且任何能够出现在以上节点中的内容都可以出现在&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;中&lt;br /&gt;
  template能够安全地出现在html解析器不允许出现的位置，几乎可以作为任何内容的子节点，如&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-3&quot;&gt;激活&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var t = document.querySelector(&#39;#mytemplate&#39;)
t.content.querySelector(&#39;img&#39;).src = &#39;logo.png&#39;;

var clone = document.importNode(t.content, true);
document.body.appendChild(clone);
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/reading/polymer/template.html</link>
        <guid isPermaLink="true">http://bencode.github.io/reading/polymer/template.html</guid>
        
        
        <category>reading</category>
        
        <category>polymer</category>
        
      </item>
    
      <item>
        <title>Polymer学习笔记 - Shadow DOM</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;基本使用&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var el = document.createElement(&#39;div&#39;)
var shadow = el.createShadowRoot()
shadow.innerHTML = &#39;&amp;lt;content select=&quot;q&quot;&amp;gt;&amp;lt;/content&amp;gt;&#39;
document.body.appendChild(el)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;subtrees&quot;&gt;subtrees&lt;/h2&gt;

&lt;p&gt;一个节点承载三棵树： light DOM, shadow DOM 和 composed DOM&lt;/p&gt;

&lt;p&gt;组件提供者创建shadow DOM, 使用者提供light DOM， 然后浏览器结合两者成为composed DOM进行渲染。 &lt;br /&gt;
shadow DOM不能被用户访问到，它有自己的空间。 &lt;br /&gt;
这本质上是一种封装和开放，设计上的艺术。&lt;/p&gt;

&lt;h2 id=&quot;polyfill&quot;&gt;Polyfill&lt;/h2&gt;

&lt;p&gt;原生不支持ShadowDom的浏览器，可以使用ShadowDOMPolyfill来包装，只是即使这样，也有若干限制。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;事件重定向&lt;/h3&gt;

&lt;h3 id=&quot;section-2&quot;&gt;已知的缺陷&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;css封装性&lt;/li&gt;
  &lt;li&gt;Object.prototype.toString和原生支持的返回不一致&lt;/li&gt;
  &lt;li&gt;document, window, document.body, document.head等不可配置，不能被重写&lt;/li&gt;
  &lt;li&gt;跨window, frame未实现&lt;/li&gt;
  &lt;li&gt;:host()伪类选择器最多支持1层嵌套的括号选择器&lt;br /&gt;
例：&lt;code&gt;:host(.zot)&lt;/code&gt; and &lt;code&gt;:host(.zot:not(.bar))&lt;/code&gt; 支持, &lt;br /&gt;
  &lt;code&gt;:host(.zot:not(.bar:nth-child(2)))&lt;/code&gt; 不支持&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[资料]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.polymer-project.org/platform/shadow-dom.html&quot;&gt;https://www.polymer-project.org/platform/shadow-dom.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dvcs.w3.org/hg/webcomponents/raw-file/57f8cfc4a7dc/explainer/index.html#shadow-dom-section&quot;&gt;https://dvcs.w3.org/hg/webcomponents/raw-file/57f8cfc4a7dc/explainer/index.html#shadow-dom-section&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/&quot;&gt;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/&quot;&gt;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-301/&quot;&gt;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-301/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/reading/polymer/shadow-dom.html</link>
        <guid isPermaLink="true">http://bencode.github.io/reading/polymer/shadow-dom.html</guid>
        
        
        <category>reading</category>
        
        <category>polymer</category>
        
      </item>
    
      <item>
        <title>Polymer学习笔记 - Helper Methods</title>
        <description>&lt;h2 id=&quot;html-imports&quot;&gt;动态Html imports&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Polymer.import(urls, callback)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;dynamic-element&amp;gt;
  I&#39;m just an unknown element.
&amp;lt;/dynamic-element&amp;gt;

&amp;lt;script&amp;gt;
  var button = document.querySelector(&#39;button&#39;)
  button.addEventListener(&#39;click&#39;, function() {
    Polymer.import([&#39;dynamic-element.html&#39;], function() {
      document.querySelector(&#39;dynamic-element&#39;).description = &#39;a dynamic import&#39;
    })
  });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;mixins&quot;&gt;mixins&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Polymer.mixin(target, obj1 [, obj2, ..., objN ] )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section&quot;&gt;强制注册元素&lt;/h2&gt;

&lt;p&gt;默认情况下，Polymer会等待所有元素ready, 再进行注册和更新。 &lt;br /&gt;
如果一个元素没有调用Polymer构造函数，也没有使用noscript属性，则它会一直等待。 &lt;br /&gt;
Polymer.waitingFor帮助方法返回一个阻塞状态的polymer-element列表。  &lt;br /&gt;
Polymer.forceReady通知Polymer强制注册所有已ready的元素，忽略未完成的元素。&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/reading/polymer/helper-methods.html</link>
        <guid isPermaLink="true">http://bencode.github.io/reading/polymer/helper-methods.html</guid>
        
        
        <category>reading</category>
        
        <category>polymer</category>
        
      </item>
    
      <item>
        <title>Polymer学习笔记 - Data Binding</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;For Polymer elements, &lt;strong&gt;the model is always the element itself&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;polymer-element name=&quot;name-tag&quot;&amp;gt;
  &amp;lt;template&amp;gt;
    This is &amp;lt;b&amp;gt;{ {owner}}&amp;lt;/b&amp;gt;&#39;s name-tag element.
  &amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;document.querySelector(&#39;name-tag&#39;).owner = &#39;June&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;template&quot;&gt;&amp;lt;template&amp;gt;&lt;/h3&gt;

&lt;p&gt;在Polymer中，使用template定义自定义元素的shadow dom&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;数据绑定和事件处理&lt;/h3&gt;

&lt;p&gt;在事件绑定方法中可以取得事件源节点和模型&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template repeat=&quot;{ {s in stories}}&quot;&amp;gt;
  &amp;lt;li on-click={ {selectStory}}&amp;gt;{ {s.headline}}&amp;lt;/li&amp;gt;

selectStory: function(e, detail, sender) {
  var story = e.target.templateInstance.model.s
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;types-of-bindings&quot;&gt;Types of bindings&lt;/h2&gt;

&lt;p&gt;有多种绑定数据和模板的方式&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;单模板实例&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;template bind=&quot;{ {person}}&quot;&amp;gt;
    This template can bind to the person object’s properties, like { {name}}.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了方便可以创建&lt;em&gt;name scope&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template bind=&quot;persion as p&quot;&amp;gt;
  ... like { {p.name}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-2&quot;&gt;循环模板&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template repeat=&quot;{ {array}}&quot;&amp;gt;
  Creates an instance with { {}} bindings  for every element in the array collection.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用空表达式&lt;code&gt;{ {}}&lt;/code&gt;表示当前对象&lt;/p&gt;

&lt;p&gt;repeat也支持&lt;em&gt;name scope&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template repeat=&quot;{ {user, userIndex in users}}&quot;&amp;gt;
  { {user.name}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;repeat可以省略&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;this.items = [
  { name: &#39;Milk&#39; },
  ...
]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template bind=&quot;{ {item}}&quot;&amp;gt;
  &amp;lt;p&amp;gt;items count: { {length}}
  &amp;lt;template repeat&amp;gt;
    &amp;lt;li&amp;gt;{ {name}}&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-3&quot;&gt;条件模板&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template if=&quot;{ {conditionalValue}}&quot;&amp;gt;
  Binds if and only if conditionalValue is truthy.
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以混合使用&lt;em&gt;repeat&lt;/em&gt;和&lt;em&gt;if&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template repeat=&quot;{ {item in list.items}}&quot; if=&quot;{ {list.showItems}}&quot;&amp;gt;
  &amp;lt;li&amp;gt;{ {item.name}}&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-4&quot;&gt;引用模板&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template id=&quot;myTemplate&quot;&amp;gt;
  这个模板可以被其他地方引用
&amp;lt;/template&amp;gt;

&amp;lt;template bind ref=&quot;myTemplate&quot;&amp;gt;
  这里的内容就忽略啦，使用myTemplate模板内容了
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;node-binding&quot;&gt;Node Binding&lt;/h3&gt;

&lt;p&gt;node binding用于关联节点和模型&lt;/p&gt;

&lt;p&gt;如何绑定依赖于节点类型和绑定名称，绑定名称和绑定在节点中出现的位置有关系&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;textContent 如 &lt;code&gt;&amp;lt;span&amp;gt;{ {someText}}&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;styleName 如 &lt;code&gt;&amp;lt;span style=&quot;{ {someStyles}}&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-5&quot;&gt;文本绑定&lt;/h4&gt;

&lt;p&gt;出现在节点中间的绑定就是textContent binding&lt;/p&gt;

&lt;p&gt;比如 &lt;code&gt;&amp;lt;p&amp;gt;This paragraph has some { {adjective}} text.&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;textContent绑定是单向的，改变模型，会改变内容, 但反之不会&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;属性绑定&lt;/h4&gt;

&lt;p&gt;如何进行属性绑定和节点类型和属性名有关&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;大部分标准dom的属性绑定都是单向的，比如style&lt;/li&gt;
  &lt;li&gt;表单元素，支持双向绑定&lt;/li&gt;
  &lt;li&gt;polymer element的公共属性是支持双向绑定的&lt;/li&gt;
  &lt;li&gt;自定义元素可以实现自己的绑定方式&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-7&quot;&gt;表单元素值的绑定&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;input元素的value和checked&lt;/li&gt;
  &lt;li&gt;options元素的value&lt;/li&gt;
  &lt;li&gt;select元素的selectIndex和value&lt;/li&gt;
  &lt;li&gt;textarea的value&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-8&quot;&gt;条件属性&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;span hidden?=&quot;{ {isHidden}}&quot;&amp;gt;This may or may not be hidden.&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-9&quot;&gt;一次性绑定&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type=&quot;text&quot; value=&quot;[[ obj.value ]]&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-10&quot;&gt;表达式&lt;/h2&gt;

&lt;h3 id=&quot;section-11&quot;&gt;行为和限制&lt;/h3&gt;

&lt;p&gt;表达式是javascript的子集&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;表达式用来处理简单的逻辑，不应该把复杂的逻辑放在表达式中&lt;/li&gt;
  &lt;li&gt;表达式从来不是使用eval执行，也不能访问global变量。&lt;/li&gt;
  &lt;li&gt;不能使用表达式插入HTML, 为了防止xss，默认对输出值进行html escape&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-12&quot;&gt;执行&lt;/h3&gt;

&lt;p&gt;表达式可以使用在以下三种情况 &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ {expression}}

[[expression]]

computed: {
  name: expression
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;scope&quot;&gt;上下文(scope)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;bind, repeat, if属性表达式使用的是父模板的作用域&lt;/li&gt;
  &lt;li&gt;最外层模板中表达式和computed属性表达式使用的作用域都是元素本身&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-13&quot;&gt;嵌套作用域规则&lt;/h3&gt;

&lt;p&gt;对于name scope模板，其父作用域是可见的，否则父作用域不可见&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;!-- outermost template -- element&#39;s properties available --&amp;gt;
  &amp;lt;template bind=&quot;{ {organization as organization}}&quot;&amp;gt;
    &amp;lt;!-- organization.* available --&amp;gt;
    &amp;lt;template bind=&quot;{ {organization.contact as contact}}&quot;&amp;gt;
      &amp;lt;!-- organization.* &amp;amp; contact.* available --&amp;gt;
      &amp;lt;template bind=&quot;{ {contact.address}}&quot;&amp;gt;
        &amp;lt;!-- only properties of address are available --&amp;gt;
        &amp;lt;template bind=&quot;{ {streetAddress as streetAddress}}&quot;&amp;gt;
          &amp;lt;!-- streetAddress.* and properties of address are available.
               NOT organization.* or contact.* --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-14&quot;&gt;过滤器&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{ {user | formatUserName}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的方式，如果user中的字段变化了，表达式不会重新求值,  &lt;br /&gt;
因为表达式不知道应该监听什么属性变化，所以得主动告诉它。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{ { {firstName: user.firstName, lastName: user.lastName} | formatUserName}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;tokenlist-styleobject&quot;&gt;tokenList, styleObject&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&quot;{ }&quot;  
&amp;lt;div style=&quot;{ {styles | styleObject}}&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-15&quot;&gt;自定义过滤器&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Polymer(&#39;greeting-tag&#39;, {
  ...
  toUpperCase: function(value) {
    return value.toUpperCase()
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要处理双向绑定的过滤器：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;toUpperCase: {
  toDOM: function(value) {
    return value.toUpperCase()
  },
  toModel: function(value) {
    return value.toLowerCase()
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-16&quot;&gt;过滤器参数&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{ {myNumber | toFixed(2)}}

toFixed: function(value, precision) {
  return Number(value).toFixed(precision)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;chaining-filter&quot;&gt;chaining filter&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{ {myNumber | toHex | toUpperCase}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-17&quot;&gt;自定义全局过滤器&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;PolymerExpressions.prototype.uppercase = function(input) {
  return input.toUpperCase()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;全局过滤器使用html import方式载入&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link rel=&quot;import&quot; href=&quot;uppercase-filter.html&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-18&quot;&gt;兼容性相关的注意事项&lt;/h2&gt;

&lt;p&gt;不支持template的浏览器，将不支持template节点存在于某些元素里，比如select和table&lt;/p&gt;

&lt;p&gt;Polymer采用变通的方式&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;table&amp;gt;
  &amp;lt;tr template repeat=&quot;{ {tr in rows}}&quot;&amp;gt;
    &amp;lt;td&amp;gt;Hello&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;select的例子&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;polymer-element name=&quot;my-select&quot;&amp;gt;
  &amp;lt;template&amp;gt;
    &amp;lt;select&amp;gt;
      &amp;lt;option template repeat=&quot;{ {options}}&quot;&amp;gt;{ {}}&amp;lt;/option&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有些浏览器对属性值中有特殊字符不支持，如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;img src=&quot;/users/{ {id}}.jpg&quot; /&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以在属性前加_&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;img _src=&quot;/users/{ {id}}.jpg&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-19&quot;&gt;数据绑定如何工作&lt;/h2&gt;

&lt;p&gt;Polymer在数据绑定时，不是像传统的ajax那样，会将整片dom进行替换，  &lt;br /&gt;
而是进行&lt;strong&gt;最小的必要的dom变化&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;table&amp;gt;
    &amp;lt;template repeat=&quot;{ {item in items}}&quot;&amp;gt;
      &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt; { {item.name}} &amp;lt;/td&amp;gt;&amp;lt;td&amp;gt; { {item.count}} &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
    &amp;lt;/template&amp;gt;
   &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt; Bass &amp;lt;/td&amp;gt;&amp;lt;td&amp;gt; 7 &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;  
   &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt; Catfish &amp;lt;/td&amp;gt;&amp;lt;td&amp;gt; 8 &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt; 
   &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt; Trout &amp;lt;/td&amp;gt;&amp;lt;td&amp;gt; 0 &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;比如现在你对items进行重新排序，polymer不会创建和销毁dom，仅仅也是重新排列一下dom&lt;/p&gt;

&lt;p&gt;如果改变了一个item的count，则只会改变一个td中的值&lt;/p&gt;

&lt;h3 id=&quot;section-20&quot;&gt;数据绑定如何跟踪每个模板实例&lt;/h3&gt;

&lt;p&gt;当模板创建一个或多个实例，它会将实例插入紧跟着模板的位置，并且跟踪每个实例最后节点  &lt;br /&gt;
这样第一个实例就是模板结尾开始到第一个实例结尾，后面的依旧。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template repeat=&quot;{ {item in myList}}&quot;&amp;gt;
  &amp;lt;img&amp;gt;
  &amp;lt;span&amp;gt;{ {item.name}}&amp;lt;/span&amp;gt;
&amp;lt;/template&amp;gt;                  
  &amp;lt;img&amp;gt;
  &amp;lt;span&amp;gt;foo&amp;lt;/span&amp;gt;   ⇐ terminating node in template instance
  &amp;lt;img&amp;gt;
  &amp;lt;span&amp;gt;bar&amp;lt;/span&amp;gt;   ⇐ terminating node in template instance
  &amp;lt;img&amp;gt;
  &amp;lt;span&amp;gt;baz&amp;lt;/span&amp;gt;   ⇐ terminating node in template instance
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-21&quot;&gt;直接操作模板生成的节点&lt;/h3&gt;

&lt;p&gt;正常情况下，你不应该直接去修改模板生成的dom。 &lt;br /&gt;
非要修改，根据上面的原理，只要不修改最后一个节点，那问题是不大的。 &lt;br /&gt;
所以如果要修改，一般来说嵌套一层，只修改里面的dom节点。 &lt;br /&gt;
但是当修改模型后，修改的dom可能会被替换，因为双向数据绑定只针对于表单域。&lt;/p&gt;

&lt;h2 id=&quot;polymer-element&quot;&gt;在Polymer Element之外使用数据绑定&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;使用auto-binding template&lt;/li&gt;
  &lt;li&gt;可以直接使用&lt;a href=&quot;https://github.com/polymer/TemplateBinding&quot;&gt;TemplateBinding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;auto-binding-template&quot;&gt;使用auto-binding template可以享有以下特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;完整的数据绑定功能&lt;/li&gt;
  &lt;li&gt;声明式事件映射&lt;/li&gt;
  &lt;li&gt;自动节点查找&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;template-binding&quot;&gt;Template Binding&lt;/h2&gt;

&lt;p&gt;Polymer的Template Binding扩展了Html TemplateElement, 让它支持数据绑定的方式来创建，管理和移除内容。&lt;/p&gt;

&lt;p&gt;可以独立使用Template Binding&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template id=&quot;greeting&quot; bind=&quot;{ { salutations }}&quot;&amp;gt;
  Hello, { {who}} - { {what}}
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
  var t = document.querySelector(&#39;#greeting&#39;)
  var model = {
    salutations: { what: &#39;GoodBye&#39;, who: &#39;Imperative&#39; }
  }
  t.model = model   // &amp;lt;-- 设置模型
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;nodebind&quot;&gt;Node.bind()&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/polymer/NodeBind&quot;&gt;Node.bind&lt;/a&gt; 用于数据绑定，可以将节点绑定到数据属性，它也可以独立的使用&lt;/p&gt;

&lt;h3 id=&quot;section-22&quot;&gt;基本使用&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var obj = {
  path: {
    to: {
      value: &#39;hi&#39;
    }
  }
}

var textNode = document.createTextNode(&#39;mytext&#39;)
textNode.bind(&#39;textContent&#39;, new PathObserver(obj, &#39;path.to.value&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-23&quot;&gt;绑定类型&lt;/h3&gt;

&lt;p&gt;以下类型可以进行双向绑定&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Text node - textContent&lt;/li&gt;
  &lt;li&gt;HtmlInputElement - value &amp;amp; checked&lt;/li&gt;
  &lt;li&gt;HtmlTextareaElement - value&lt;/li&gt;
  &lt;li&gt;HtmlSelectElement - value 和 selectedIndex&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以其他的都绑定到元素属性&lt;/p&gt;

&lt;h3 id=&quot;section-24&quot;&gt;自定义元素的绑定&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;MyFancyHTMLWidget.prototype.bind = function(name, observable, oneTime) {
  if (name == &#39;myBinding&#39;) {
    // interpret the binding meaning
    // if oneTime is false, this should return an object which
    // has a close() method.
    // this will allow TemplateBinding to clean up this binding
    // when the instance containing it is removed.
  } else {
    return HTMLElement.prototype.bind.call(
      this, name, observable, oneTime
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Fri, 07 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/reading/polymer/data-binding.html</link>
        <guid isPermaLink="true">http://bencode.github.io/reading/polymer/data-binding.html</guid>
        
        
        <category>reading</category>
        
        <category>polymer</category>
        
      </item>
    
      <item>
        <title>Polymer学习笔记 - API Developer Guide</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.polymer-project.org/docs/polymer/polymer.html&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;help make developing web components much easier&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;声明&lt;/h2&gt;

&lt;p&gt;使用&lt;code&gt;&amp;lt;polymer-element&amp;gt;&lt;/code&gt;声明组件&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;属性&lt;/h2&gt;

&lt;p&gt;有一些保留的attributes用于描述组件  &lt;br /&gt;
如：&lt;em&gt;name, attributes, extends, noscript, constractor&lt;/em&gt;&lt;br /&gt;
其他的属性将会自动应用到组件  &lt;br /&gt;
属性名的大小写是无关紧要的，polymer会聪明地应用到实际对象上&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;注册&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Polymer(tag-name, prototype)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;custom-element-prototype-chain&quot;&gt;Custom element prototype chain&lt;/h2&gt;

&lt;p&gt;Polymer对象属性和方法的继承链：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;prototype对象中定义的属性和方法&lt;/li&gt;
  &lt;li&gt;Polymer定义的基本属性和方法&lt;/li&gt;
  &lt;li&gt;HTML Element的属性和方法&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以为了避免冲突，请不要定义&lt;em&gt;id, children, focus, title, hidden&lt;/em&gt;等属性和方法&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;结果不可预料 ？ &amp;lt;－－ 文档中是这么说的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-3&quot;&gt;属性的引用&lt;/h2&gt;

&lt;p&gt;在模板中 &lt;code&gt;$.globals.firstName&lt;/code&gt;  &lt;br /&gt;
在js中 &lt;code&gt;this.$.globals.firstName&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;生命周期&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
  created: function() {},  
  ready: function() {},  
  attached: function() {},
  domReady: function() {},  
  detached: function() {},  
  attributeChanged: function(name, oldValue, newValue) {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;polymer-ready&quot;&gt;polymer-ready&lt;/h2&gt;

&lt;p&gt;polymer解析定义，更新以及载入资源都是异步的，所以需要一个类似domready的事件来防止&lt;a href=&quot;http://en.wikipedia.org/wiki/Flash_of_unstyled_content&quot;&gt;FOUC&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;$(window).on(&#39;polymer-ready&#39;, function() {
  var xfoo = $(&#39;x-foo&#39;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-5&quot;&gt;公共属性&lt;/h2&gt;

&lt;p&gt;有两种方式声明公共属性&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;polymer-element节点中使用attributes属性 (推荐)&lt;/li&gt;
  &lt;li&gt;polymer构造器中使用publish&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在节点中声明的好处是，一眼就能看出有哪些公共属性。   &lt;br /&gt;
不过当属性很多，需要默认值，以及使用&lt;em&gt;reflect&lt;/em&gt;特性时，使用js的方式还是更方便。&lt;/p&gt;

&lt;p&gt;默认属性是&lt;em&gt;undefined&lt;/em&gt;, 可以使用以下两种方式声明默认值&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;polymer-element name=&quot;x-foo&quot; attributes=&quot;bar&quot;&amp;gt;
  &amp;lt;script&amp;gt;
    Polymer({
      bar: false
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更简洁的方式&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;polymer-element name=&quot;x-foo&quot;&amp;gt;
  &amp;lt;script&amp;gt;
    Polymer({
      publish: {
        bar: false
      }
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于属性类型为对象和数组的，需要在created回调方法中设置默认值，以保证每个组件有独立的实例数据&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;polymer-element name=&quot;x-defaults&quot; attributes=&quot;settings&quot;&amp;gt;
  &amp;lt;script&amp;gt;
    Polymer({
      created: function() {
        this.settings = {
          textColor: &#39;blue&#39;
        }
      }
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;property-reflection&quot;&gt;property reflection&lt;/h2&gt;

&lt;p&gt;设置对象属性时，会自动传递到节点&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.name = &quot;Joe&quot;  --&amp;gt; this.setAttribute(&#39;name&#39;, &#39;Joe&#39;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;由于双向绑定机制，这个特性大多数情况下用不到，所以默认是关闭的&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;property reflection和双向数据绑定不是一回事&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-6&quot;&gt;数据绑定&lt;/h2&gt;

&lt;p&gt;核心特点，有整整一章介绍哦：）&lt;/p&gt;

&lt;h2 id=&quot;computed-properties&quot;&gt;Computed properties&lt;/h2&gt;

&lt;p&gt;可以使用Polymer Expression来定义属性，这个属性也可以参于Data Binding哦。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;input type=&quot;number&quot; value=&quot;{ {num}}&quot; ...
  &amp;lt;em&amp;gt;{ {num}}^1 = { {square}}&amp;lt;/em&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
  Polymer({
    num: 2,
    computed: {
      square: &#39;num * num&#39;   //  &amp;lt;-- Polymer Expression
    }
  })
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-7&quot;&gt;声明式事件映射&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;input on-click=&quot;{ {buttonClick}}&quot;

&amp;lt;script&amp;gt;
  Polymer({
    buttonClick: function(event, detail, sender) {
    }
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-8&quot;&gt;属性监听&lt;/h2&gt;

&lt;h3 id=&quot;section-9&quot;&gt;基于约定的属性监听机制&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;polymer-element properties=&quot;better&quot;&amp;gt;

  &amp;lt;script&amp;gt;
    Polymer({
      better: &#39;&#39;,
      betterChanged: function(oldValue, newValue) {
      }
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-10&quot;&gt;自定义的属性监听&lt;/h3&gt;

&lt;p&gt;有时候基于约定还搞不定时，需要使用&lt;code&gt;observe&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Polymer({
  observe {
    foo: &#39;validate&#39;,
    bar: &#39;validate&#39;
  },

  validate: function(oldValue, newValue) {
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-11&quot;&gt;自动节点查找&lt;/h2&gt;

&lt;p&gt;有id的dom节点引用，可以通过&lt;code&gt;this.$.id&lt;/code&gt; 引用得到&lt;/p&gt;

&lt;h2 id=&quot;section-12&quot;&gt;自定义事件&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Polymer({
  onClick: function() {
    this.fire(&#39;ouch&#39;, { ... })
  }
})


$(&#39;ouch-button&#39;).on(&#39;ouch&#39;, function(e) {
  e.type
  e.detail
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-13&quot;&gt;扩展&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;polymer-element name=&quot;polymer-coller&quot; extends=&quot;polymer-cool&quot;&amp;gt;
  &amp;lt;template&amp;gt;
    &amp;lt;shadow&amp;gt;&amp;lt;/shadow&amp;gt;  &amp;lt;!-- 调用父类模板 --&amp;gt;
  &amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;调用父类的方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Polymer({
  praise: &#39;cool&#39;,
  makeCoolest: function() {
    this.super()  // 调用父类方法
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是如何实现的?  arguments.callee.caller ?&lt;/p&gt;

&lt;h2 id=&quot;section-14&quot;&gt;内置方法&lt;/h2&gt;

&lt;h3 id=&quot;dom&quot;&gt;监听原生dom子节点变化&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;onMutation(element, callback)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-15&quot;&gt;处理异步任务&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Polymer中到处都是异步，变化会先被收集，然后一次性处理，而不是每次都执行。&lt;br /&gt;
  这样就可以进行优化，并且防止重复的工作，并且减少不必要的FOUC&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;this.async(function() {
  this.foo = 3  // this会自动绑定到节点对象
}, null, 1000)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-16&quot;&gt;延迟任务&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;this.responseChanged = function() {
  this.job(&#39;job1&#39;, function() {
    this.fire(&#39;done&#39;)
  }, 5000)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;job可以避免重复操作，类似于我实现的schedule&lt;/p&gt;

&lt;h2 id=&quot;section-17&quot;&gt;高级主题&lt;/h2&gt;

&lt;h3 id=&quot;section-18&quot;&gt;一些方法&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;this.cancelUnbindAll()
unbindAll()
preventDispose
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-19&quot;&gt;数据变化如何传递&lt;/h3&gt;

&lt;p&gt;如果Object.observe()支持，则使用它来监听属性变化&lt;br /&gt;
如果不支持，则使用Platform.flash()来轮询检查变量&lt;/p&gt;

&lt;h3 id=&quot;polymer-element&quot;&gt;Polymer Element如何初始化&lt;/h3&gt;

&lt;p&gt;从性能上考虑，element在created时，如果不在main document内，避免创建ShadowDOM, 进行事件监听，监控属性变化。  &lt;br /&gt;
这在行为上类似原生的img和video&lt;/p&gt;

&lt;p&gt;在以下场景，element将会初始化&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;当在main document中创建, document.defaultView存在&lt;/li&gt;
  &lt;li&gt;attached&lt;/li&gt;
  &lt;li&gt;当它的shadowRoot节点被初始化时&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;alwaysPrepare属性可以强制初始化&lt;/p&gt;

&lt;h3 id=&quot;section-20&quot;&gt;路径问题&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;this.resolvePath(x-foo.png)&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 06 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/reading/polymer/api-developer-guide.html</link>
        <guid isPermaLink="true">http://bencode.github.io/reading/polymer/api-developer-guide.html</guid>
        
        
        <category>reading</category>
        
        <category>polymer</category>
        
      </item>
    
      <item>
        <title>AOP及其在Javascript中的应用</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;两个例子&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;示例1&lt;/h3&gt;

&lt;p&gt;旺铺中有一些前端的方法，提供APP，模板，自定义样式的基本功能&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// 用于应用模板
TemplateService.apply(template)

// 应用自定义样式
CustomStyleService.apply(subject, data);

// 用于添加，载入，编辑，删除app
AppService.load(app)
AppService.edit(app)
AppService.del(app)
AppService.add(app)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有一个需求是：这些操作成功后，需要打个点&lt;/p&gt;

&lt;p&gt;我们知道直接在这些实现中打点是不适合适的，因为打点不是这些功能“应有的逻辑”，而是“附加”的逻辑&lt;/p&gt;

&lt;p&gt;一种不错的的方法是使用事件，比如旺铺以上这些操作都对应于事件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;page-template-apply
page-custom-style-update

app-load
app-save
app-delete
app.add
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打点实现&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;site.on(&#39;page-template-apply&#39;, function() {
  doTrace(&#39;...&#39;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看到，原先我们可能需要在基础代码中进行打点，而现在通过一个observer “倒置”了依赖，让打点依赖于这些事件&lt;/p&gt;

&lt;p&gt;再看另一种“邪恶”一点的实现, 我们直接看一下代码&lt;/p&gt;

&lt;p&gt;在template-service.js中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var TemplateService = {
  apply: function() {
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在另一个打点文件中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var _apply = TemplateService.apply;
TemplateService.apply = function() {
  var defer = _apply.apply(this, arguments);
  defer.done(function() {
    doTrace();	// 应用成功后我们打个点
  });
  return defer;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对第二种情况分析下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;原来的模块不需要依赖业务模块，还是那么干净，而且如果单为实现这个功能，连事件都不需要&lt;/li&gt;
  &lt;li&gt;写以上代码时，你会感觉有点害怕&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-2&quot;&gt;示例2&lt;/h3&gt;

&lt;p&gt;有时候我们需要对一些第三方库fix，比如我们对Number#toFixed进行一些修改以支持价格展示&lt;/p&gt;

&lt;p&gt;比如旺铺中为了更好地规划jQuery的构造，context不能为空&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var node = $(&#39;div.panel&#39;, context);
var node = $(&#39;.panel&#39;);   // 在开发时应该提示一些警告，说最好带上tag以及context
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;示例代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;if (may.log.isEnabled(&#39;info&#39;)) {

  var orijQuery = jQuery,
    ...;

  jQuery = function(selector, context) {
    if (typeof selector === &#39;string&#39; &amp;amp;&amp;amp; 
        selector !== &#39;body&#39; &amp;amp;&amp;amp;
        !/^\s*&amp;lt;/.test(selector) &amp;amp;&amp;amp; 
        !/^#/.test(selector)) {

      if (context === undefined) {
        warn(&#39;please specify context for &#39;+ selector + &#39; in &#39;, 
            arguments.callee.caller);
      }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们在日志级别为info时疯狂了一把,&lt;br /&gt;
然后开发时代码就会帮我们检查了。&lt;/p&gt;

&lt;p&gt;总结：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在方法执行后执行一段逻辑&lt;/li&gt;
  &lt;li&gt;重写方法，执行自己的逻辑&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-3&quot;&gt;词汇&lt;/h2&gt;

&lt;p&gt;连接点(join point)&lt;br /&gt;
切入点(pointcut)&lt;br /&gt;
通知(Advice)&lt;br /&gt;
Aspect&lt;br /&gt;
编织(weaving)&lt;/p&gt;

&lt;h2 id=&quot;aspect&quot;&gt;Aspect模块简介&lt;/h2&gt;

&lt;p&gt;静态方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Aspect.before(target, pointcut, advice)
Aspect.after(target, pointcut, advice)
Aspect.around(target, pointcut, advice)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实例方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Aspect#before(target, pointcut, advice)
Aspect#after(target, pointcut, advice)
Aspect#around(target, pointcut, advice)

Aspect#attach()
Aspect#detach()

Aspect#isDetached
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-4&quot;&gt;实践&lt;/h2&gt;

&lt;h3 id=&quot;section-5&quot;&gt;示例1&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;define(&#39;demo.Page&#39;, [&#39;jQuery&#39;, &#39;Log&#39;, &#39;lang.Aspect&#39;, &#39;ui.Dialog&#39;], 

function($, Log, Aspect, Dialog) {


var log = new Log(&#39;demo.Page&#39;);

var aspect = new Aspect();
  
return {
  init: function(div) {
    var self = this;
    div.on(&#39;click&#39;, &#39;a[data-action]&#39;, function(e) {
      e.preventDefault();

      var action = $(this).data(&#39;action&#39;);
      log.info(action)
      self[action]();
    });
  },

  onAlert: function() {
    alert(&#39;Hello&#39;);
  },

  onBefore: function() {
    aspect.before(window, &#39;alert&#39;, function(o) {
      var title = o.args[0];
      return [&#39;Before &#39; + title];
    });
  },

  onAfter: function() {
    aspect.after(window, &#39;alert&#39;, function(o) {
      var _alert = o.method;	
      _alert(o.args[0] + &#39; After&#39;);
    });
  },

  onAround: function() {
    aspect.around(window, &#39;alert&#39;, function(o) {
      Dialog.info(o.args[0]);
    });
  },

  onAttach: function() {
    aspect.attach();
  },

  onDetach: function() {
    aspect.detach();
  }

};
  
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-6&quot;&gt;示例2&lt;/h3&gt;

&lt;p&gt;HtmlParser结构&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var HtmlParser = {
  parse: function(),
  parseNode: function(),
  parseComment: function(),
  parseElement: function(),
  parseTag: function(),
  parseAttribute: function(),
  parseText: function()...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Visitor结构&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var Visitor = {
  visitNode: function(node) {
    console.debug(node);
  },

  visitComment: function(comment) {
    console.debug(comment);
  },

  visitElement: function(elm) {
    console.debug(elm);
  },

  visitTag: function(tag) {
    console.debug(tag);
  },

  visitAttribute: function(attr) {
    console.debug(attr);
  },

  visitText: function(text) {
    console.debug(text);
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;parse和parseWithVisit&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;  init: function(div) {
    $(&#39;a.parse&#39;, div).on(&#39;click&#39;, $.proxy(this, &#39;parse&#39;));
    $(&#39;a.parse-with-visit&#39;, div).on(&#39;click&#39;, $.proxy(this, &#39;parseWithVisit&#39;));

    this.text = $(&#39;textarea.html-text&#39;, div);
  },

  parse: function() {
    var parser = new HtmlParser(this.text.val());
    var o = parser.parse();
    console.debug(o);
  },

  parseWithVisit: function() {
    var parser = new HtmlParser(this.text.val());
    
    this.weave(parser);
    
    parser.parse();
  },

  weave: function(parser) {
    Aspect.after(parser, /^parse\w+/, function(o) {
      var name = o.name,
        visitName = &#39;visit&#39; + /^parse(\w+)$/.exec(name)[1];
      
      Visitor[visitName] &amp;amp;&amp;amp; Visitor[visitName](o.result);
    });
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-7&quot;&gt;注意&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;OOP 和 AOP &lt;/p&gt;

    &lt;p&gt;OOP: 处理核心逻辑&lt;/p&gt;

    &lt;p&gt;AOP： 处理切面逻辑&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;执行流程比较难理解&lt;/li&gt;
  &lt;li&gt;破坏了封装性&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 26 Dec 2012 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/javascript/aop-practice.html</link>
        <guid isPermaLink="true">http://bencode.github.io/javascript/aop-practice.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>git学习记录</title>
        <description>&lt;p&gt;用git一段时间了，但是只掌握了其中一小部分内容，这两天把progit重新看一遍，这里就记一下关键的东西&lt;/p&gt;

&lt;p&gt;pro git 这本书是作者免费提供的哦，佩服作者Scott Chacon的奉献精神，大家可以到这里看&lt;a href=&quot;http://progit.org&quot;&gt;http://progit.org&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;1. 开始&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;1.1 关于版本控制&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;本地版本控制, 如rcs&lt;/li&gt;
  &lt;li&gt;集中式版本控制, 如 cvs, svn.  主要有以下缺点
    &lt;ul&gt;
      &lt;li&gt;服务器挂了, 所有版本信息就丢失了&lt;/li&gt;
      &lt;li&gt;不能山上写代码, 然后比较, CI等&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;分布式版本控制&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;git&quot;&gt;1.2 关于git及特点&lt;/h3&gt;

&lt;p&gt;git诞生于Linux，一开始被用来管理Linux内核代码，有以下特点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;速度&lt;/li&gt;
  &lt;li&gt;简单设计&lt;/li&gt;
  &lt;li&gt;对非线性开发有强大的支持(成千上万个并行分支) —– 这个是git最重要的特点，可以改变开发模式&lt;/li&gt;
  &lt;li&gt;完全分布式&lt;/li&gt;
  &lt;li&gt;适合巨大项目(像linux内核)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;git-1&quot;&gt;1.3 git基础&lt;/h3&gt;

&lt;p&gt;这一节很重要，对git的使用和理解有很的帮助&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;快照&lt;br /&gt;
  giit是基于快照机制的(其他版本控制系统往往基于的是差异信息)&lt;br /&gt;
  比如新版本修改了一个文件, git仅仅把这个文件复制一次, 作为第二个版本的数据, 而不是计算并保存两个文件的差异信息.&lt;br /&gt;
  可以说git仅是一个文件系统，然后在它上面构建一堆强大的工具&lt;/li&gt;
  &lt;li&gt;几乎所有操作都不需要网络&lt;/li&gt;
  &lt;li&gt;三种状态&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;workding directory  |   staging area    |     repository
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(1) 初始化git后, 我们平常的目录, 就是working directory, 我们添加修改删除文件都是在working directory中工作&lt;/p&gt;

&lt;p&gt;(2) staging area（暂存区）， 可以想像成中间区域，当我们git status时， git 会比较：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;版本库 vs 暂存区
暂存区 vs 工作区
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即可能显示成这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use &quot;git rm --cached &amp;lt;file&amp;gt;...&quot; to unstage)
#
# new file:   README   &amp;lt;------------ 版本库和暂存区 diff
#
# Changes not staged for commit:
#   (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
#   (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)
#
# modified:   README    &amp;lt;------------- 暂存区和工作区 diff

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们&lt;code&gt;git commit -m &#39;...&#39;&lt;/code&gt;, 是把暂存区的内容提交到版本库&lt;/p&gt;

&lt;p&gt;所以我们添加文件后或者修改文件后需要&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;用以下命令比较版本库&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
git diff 比较工作区和暂存区的不同

git diff --cached 比较版本库和暂存区的不同

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(3) respository 即版本库&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;1.4 安装&lt;/h3&gt;
&lt;p&gt;没啥好记录的&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;1.5 配置&lt;/h3&gt;

&lt;p&gt;git的配置信息存放在三个地方&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/gitconfig
~/.gitconfig
.git/config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分别对应于不同的作用域，使用git config进行配置&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git config --system ...
git config --global ...
git config ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一些例子&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
git config --global user.name &#39;John Doe&#39;
git config --global user.email johndoe@example.com 

git config --global core.editor emacs
git config --global merge.tool vimdiff

git config --list
git config user.name

git help config

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;git-&quot;&gt;2. git 基础操作&lt;/h2&gt;

&lt;h3 id=&quot;git-2&quot;&gt;2.1 获得一个git版本库&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
git init  # 初始化git 版本库
git add a.js
git commit -m &#39;first commit&#39;

git clone git://github.com/schacon/grit.git # 从远程获取

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;recording-changes-to-the-responsitory&quot;&gt;2.2.Recording Changes to the Responsitory&lt;/h3&gt;

&lt;p&gt;git status和git add比较容易，使用git status时会有相当友好的提示，告诉你接下来做什么&lt;/p&gt;

&lt;p&gt;有些文件我们不需要版本库管理，如编辑器产生的临时文件等&lt;br /&gt;
可以在 .gitignore中放忽略文件&lt;/p&gt;

&lt;p&gt;文件中可以允许下面规则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;空行, #开头忽略&lt;/li&gt;
  &lt;li&gt;standard glob patterns work&lt;/li&gt;
  &lt;li&gt;结尾/ 表示目录&lt;/li&gt;
  &lt;li&gt;!开头表示“非”&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;
git diff      # 比较工作区和暂存区，即看看有什么没有暂存
git diff --cached # 比较版本库和暂存区

git commit
git commit -a   # 用这个可以让我们commit之前不需要运行git add, 它会自动git add已被traced的文件

git rm
git rm --cached   # 如果想remote文件，但是又不想从硬盘上把这个文件删除，可以使用--cached

git mv 等效于
rm
git rm
git add

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-4&quot;&gt;2.3 查日志&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
git log
git log -p -2 # 显示2条日志, 显示diff内容
git log --stat # 列出文件修改信息

git log --pretty=oneline|short|full|fuller # 不同的格式化形式输出日志

git log --pretty=format:&quot;%h - %an, %ar : %s&quot;  # 特定格式输出日志

git log --pretty=format:&quot;%h %s&quot; --graph   # 漂亮的ascii图，包括提交和merge信息

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;还可以指定时间区间等参数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
git log --since=2.weeks # until, after, before

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以使用gitk以gui方式看日志  —- 这个感觉挺好的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gitk
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;undoing-things&quot;&gt;2.4 Undoing Things&lt;/h3&gt;

&lt;p&gt;有时候注释写错了, 或者发现有文件没有add就commit了，此时可以使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git commit --amend   # ps: amend原来是修改的意思 :(
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;working-with-remotes&quot;&gt;2.5 Working with Remotes&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;
git clone url # 从远程clone一个版本库
git remote    # 看看配置了哪些远程仓库, 如果是clone来的，应该至少看到 origin
git remote -v # 查看远程仓库，带URL等信息
git remote add [short-name] url # 添加远程仓库，然后我们就可以从服务器上取得代码


git fetch [remote-name] # 从服务器更新内容, 但并不合并到本地分支

上面命令仅从服务器获取内容，比如我们git fetch，那么将从服务器获取内容，相当于 origin/master分支update了(remote-name省略表示使用默认远程server, 关于默认的remote，第3章有详细的介绍哦)
我们可以checkout这个分支看看 git checkout origin/master， 也可以把它合并到当前分支 git merge origin/master
这相当于git pull

git pull [remote-name] [branch-name] # fetch + merge

git push [remote-name] [branch-name] # 将本地分支branch-name push 到远程 remote-name上
一般情况下我们使用git clone时，会自动设置默认的 server和branch，所以仅仅使用
git pull和git push就可以了(第3章会有详细介绍哦)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;git remote show [remote-name]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看remote信息&lt;/p&gt;

&lt;p&gt;比如我们的知识库是这样子的:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; git remote show origin

* remote origin   # 名称
  Fetch URL: git@wd.alibaba-inc.com:fdoc-doc.git
  Push  URL: git@wd.alibaba-inc.com:fdoc-doc.git
  HEAD branch: master
  Remote branch:
    master tracked    # 远程分支, 我们可以使用git checkout origin/master
  Local branch configured for &#39;git pull&#39;:
    master merges with remote master    # 这里说的就是当我们使用git pull时，会把远程master(origin/master)自动合并到本地master分支
  Local ref configured for &#39;git push&#39;:
    master pushes to master (fast-forwardable)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再看看xray&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; git remote show origin

* remote origin
  Fetch URL: git@github.com:qhwa/fdlint.git
  Push  URL: git@github.com:qhwa/fdlint.git
  HEAD branch: master
  Remote branches:    # 看到远程有好几个分支呢, master是我们的主干分支
    css-first-rule tracked
    dsl            tracked
    html-checker   tracked
    master         tracked
  Local branch configured for &#39;git pull&#39;:
    master merges with remote master
  Local ref configured for &#39;git push&#39;:
    master pushes to master (fast-forwardable)

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;
git remote rename ＃重命名remote
git remote rm # 和git remote add 相反

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-5&quot;&gt;2.6 标记&lt;/h3&gt;

&lt;p&gt;tag用于给commit弄个别名, 或打个标记，添加些信息。&lt;br /&gt;
比如完成了1.0版commit后，可以：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git tag v1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;git show v1.0 # 可以这样查看日志
git tag # 查看所有tag
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面这种tag相当于commit的alias，即是把长长的sha1给个名字好记&lt;/p&gt;

&lt;p&gt;还有一种tag(Annotated Tag)可以加额外的message&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git tag -a v1.2 -m &#39;增强版 基本上适合所有需要了哦&#39;
git show v1.2 # 可以看到上述信息并且tag创建的日期也会存在
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也可以给指定的commit加tag&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git tag -a v1.2 9fceb02
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git push时并不会把tag push到remote, 我们需要这样&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push origin v1.1
git push origin --tags  # 所有tag都push
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-6&quot;&gt;2.7 小技巧&lt;/h3&gt;

&lt;h4 id=&quot;auto-complete&quot;&gt;1. auto complete&lt;/h4&gt;
&lt;p&gt;如果是linux, 可以source这个文件：contrib/completion &lt;br /&gt;
  我的mac用zshell，好像帮你弄了auto complete&lt;/p&gt;

&lt;h4 id=&quot;alias&quot;&gt;2. alias&lt;/h4&gt;

&lt;p&gt;使用惯svn的 co up st ci 等简写命令的，可以觉得git怎么不提供简写的命令以加快录入速度&lt;/p&gt;

&lt;p&gt;可以用alias配置自己的命令&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
  git config --global alias.co checkout
  git config --global alias.br branch
  git config --global alias.ci commit
  git config --global alias.st status
 &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;运行外部命令，这个记录下，暂时还没用到&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
  git config --global alias.visual &quot;!gitk&quot;
 &lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;3. 分支&lt;/h2&gt;

&lt;p&gt;分支是git的“killer feature”, 我们使用svn co, svn sw都慢慢的，而git的分支非常轻量级，切换分支就像切换当前目录，&lt;br /&gt;
而如果习惯了这种特定可能会改变我们开发的方式&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;3.1 分支是什么&lt;/h3&gt;

&lt;p&gt;建议有没时间都得看看：http://progit.org/book/ch3-1.html&lt;/p&gt;

&lt;p&gt;记录一段关于branch的原文：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;a branch in Git is in actuality a simple file that contains the 40 character SHA-1 checksum of the commit it points to, &lt;br /&gt;
branches are cheap to create and destroy. &lt;br /&gt;
Creating a new branch is as quick and simple as writing 41 bytes to a file (40 characters and a newline).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-9&quot;&gt;3.2 创建分支和合并&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;git branch css_feature
git checkout css_feature
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以简写为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout -b css_feature
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编辑好ci后，功能稳定了，需要合并回master&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout master
git merge css_feature
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;合并好后，css_feature分支有可能不需要了(分支仅仅是一个commit对象的引用， 合并分支就是创建一个新的commit对象)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                             master
                              |
C0 -- C1 -- C2 -- C4 -------- C6
             \               /
              -- C3 -- C5 --
                       |
                    css_feature
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;比如以上，我们一开始在master上开发，开发C2时需要实现一个css_feature，然后建了一个新分支(css_feature)， 创建分支仅仅是创建一个引用(git中的引用都是长度为40的sha1字符串)，指向C2。&lt;/p&gt;

&lt;p&gt;然后我们在css_feature上开发，两个commit后，这个功能完成了。&lt;/p&gt;

&lt;p&gt;切回master分支， 发现有个小bug，然后做了C4这个bugfix之后， 我们需要把css_feature合并到master上。&lt;/p&gt;

&lt;p&gt;当创建合并快照后，然后创建一个C6的commit对象指向它， 而C4, C5将成为C6的parent对象，即“历史”&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git branch -d css_feature # 删除原分支
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在master分支下，git log看一下所有的提交都是存在的哦:)&lt;/p&gt;

&lt;p&gt;如果没有合并的时候就尝试删除，git 不会删除成功，会提示:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;error: The branch &#39;css_feature&#39; is not fully merged.
If you are sure you want to delete it, run &#39;git branch -D css_feature&#39;.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-10&quot;&gt;解决冲突&lt;/h4&gt;

&lt;p&gt;比如我们在两个分支修改了同一文件的同一行，然后merge时发生冲突。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$&amp;gt; git status

# On branch master
# Unmerged paths:
#   (use &quot;git add/rm &amp;lt;file&amp;gt;...&quot; as appropriate to mark resolution)
#
# both modified:      abc.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后打开文件，解决冲突保存后，再add并commit即可&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add abc.txt 
git commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;合并的使用和svn有较大的区别&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;svn merge后，不管有没有冲突，都需要再CI一下，而且新分支上不存在原来分支的提交信息&lt;br /&gt;
  解决冲突后需要resoved相应的冲突，然后再ci&lt;/li&gt;
  &lt;li&gt;git merge, 如果没有冲突，将会直接创建一个新的commit对像（见上图），而且分支上的提交对象都存在当前分支上&lt;br /&gt;
  如果有冲突，则不自动创建这个commit对象。由你自己解决好后， 再commit即可&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;到这里，git的日常使用应该没啥问题了&lt;/p&gt;

&lt;h3 id=&quot;section-11&quot;&gt;3.3 分支管理&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;git branch  # 查看分支, 带*的为当前分支

git branch -v  # 查看每个分支的最后一次提交

git branch --merged  # 查看哪些分支已合并到当前分支
git branch --no-merged
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-12&quot;&gt;3.4 利用分支－工作流程&lt;/h3&gt;

&lt;p&gt;呵呵，日常工作中多多使用，积累经验&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;3.5 远程分支&lt;/h3&gt;

&lt;h2 id=&quot;git-tools&quot;&gt;6 Git Tools&lt;/h2&gt;

&lt;h3 id=&quot;revision-selection&quot;&gt;6.1 Revision Selection&lt;/h3&gt;

&lt;p&gt;一些版本选择的方式,可用于git log, git show 等&lt;/p&gt;

&lt;h4 id=&quot;sha1&quot;&gt;SHA1&lt;/h4&gt;

&lt;p&gt;git中索引一个对象(commit或文件，目录等)，都是使用40个字符长的sha1,&lt;br /&gt;
而一般项目我们只要指定前面4位就可以了, 像linux这种大型的项目也只要40位中的前12位就保证全局唯一&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
git showe 066b2e8dc9f40101d74f1784acc23b860460bbf 

git show 066b 

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关于两个文件产生相同sha1的概率：&lt;/p&gt;

&lt;p&gt;如果地球上所有的65亿人都写代码，每人每秒产出整个linux规模的代码，然后把它放在一个git responsitory中，过上个5年，应该会有50%的概率产生1例冲突&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git rev-parse v1.1 #-&amp;gt; 查看分支v1.1对应的sha1
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;reflog&quot;&gt;Reflog&lt;/h4&gt;

&lt;p&gt;a log of where your HEAD and branch references have been for the last few months &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reflog
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;ancestry-references&quot;&gt;Ancestry References&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;
git show HEAD^
git show d921970^2 # the second parent...

git show HEAD~
git show HEAD~2  # the first parent of the first parent

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;commit-ranges&quot;&gt;Commit Ranges&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;
git log master..experiment  # in experiment not in master

git log origin/master..HEAD  # 即看看哪些东西还没有push

git log origin/master.. #同上,如果省略一边, git 认为是HEAD

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面三个一样&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git log refA..refB
git log ^refA refB
git log refB --not refA
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in refB not in refA&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git log refA refB ^refC
git log refA refB --not refC
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;git log master...experiment   #in master and in experiment but not in both
git log --left-right master...experiment  #一般这样用
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;interactive-staging&quot;&gt;6.2 Interactive Staging&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;git add -i # 采用交互式操作，适合不马上提交所有东东
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果只想提交文件修改的一部分，可以使用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git add --patch  # 这功能强大，木有用过
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;stashing&quot;&gt;6.3 Stashing&lt;/h3&gt;

&lt;p&gt;有时候工作到一半，需要切换到其他分支看看，可又不能提交当前的工作（因为还没有完成），就需要使用stash&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
git stash  # 保存

... 干其他活


git stash apply # 恢复修改到当前分支(不一定是原先stash的分支， 这说明可以把修改“搬”到其他分支中)


#其他相关命令

git stash list
git stash drop ...
git stash pop # --&amp;gt; git apply; git drop

git stash branch
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;rewrite-history&quot;&gt;6.4 Rewrite History&lt;/h3&gt;

&lt;h4 id=&quot;change-the-last-commit&quot;&gt;Change the Last Commit&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;git commit --amend
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其他的好复杂，现在用不到，不看&lt;/p&gt;

</description>
        <pubDate>Tue, 17 Jan 2012 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/git/git-study.html</link>
        <guid isPermaLink="true">http://bencode.github.io/git/git-study.html</guid>
        
        
        <category>git</category>
        
      </item>
    
  </channel>
</rss>
