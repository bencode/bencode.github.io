<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bencode@编码</title>
    <description></description>
    <link>http://bencode.github.io/</link>
    <atom:link href="http://bencode.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 22 Dec 2014 21:20:13 +0800</pubDate>
    <lastBuildDate>Mon, 22 Dec 2014 21:20:13 +0800</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Hammer.js默认情况下会preventDefault的解决</title>
        <description>&lt;p&gt;默认情况下, hammer.js会preventDefault，这会阻止原生的滚动等行为。&lt;br /&gt;
这在大多数情况下没什么问题，但有些情况下我们需要这类行为时，由于它没有开放相应的参数，就比较麻烦。&lt;/p&gt;

&lt;p&gt;不过也不是不能解决，通过阅读源码，找到以下解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var mc = new Hammer.Manager();
mc.add(...)

mc.touchAction.preventSrc = function() {
    // 什么都不做
};
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Sat, 20 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/javascript/hammer-prevent-default.html</link>
        <guid isPermaLink="true">http://bencode.github.io/javascript/hammer-prevent-default.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>nginx配置error_page</title>
        <description>&lt;p&gt;官网文档：&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_core_module.html#error_page&quot;&gt;查看&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;注意点是，如果error_page指向的页面是一个远程地址，如http://demo.com/errorpage.html&lt;br /&gt;
那默认页面会进行302跳转，而不管原来的状态码。&lt;/p&gt;

&lt;p&gt;如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;error_page 404      http://demo.com/404.html;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则nginx会302到以上页面，这样会对SEO有影响，我们希望实现对页面进行代理请求&lt;/p&gt;

&lt;p&gt;此时可以配合proxy-pass做一个中间层&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location / {
    error_page 404 /404;
}

location /404 {
    proxy_pass http://demo.com/404.html;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;文档中有这样的例子，但是我试过无效果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location / {
    error_page 404 = @fallback;
}

location @fallback {
    proxy_pass http://backend;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;会出现指令出错。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
nginx: [emerg] &quot;proxy_pass&quot; cannot have URI part in location given by regular expression, or inside named location, or inside &quot;if&quot; statement, or inside &quot;limit_except&quot; block in
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Dec 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/nginx/error_page.html</link>
        <guid isPermaLink="true">http://bencode.github.io/nginx/error_page.html</guid>
        
        
        <category>nginx</category>
        
      </item>
    
      <item>
        <title>eclipse review</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;一些名词&lt;/h2&gt;

&lt;p&gt;plug-ins&lt;/p&gt;

&lt;p&gt;structed bundle of code and/or data to contribute functionality to system&lt;/p&gt;

&lt;p&gt;extensions extension-point&lt;/p&gt;

&lt;p&gt;JDT PDE&lt;/p&gt;

&lt;h2 id=&quot;runtime&quot;&gt;Runtime&lt;/h2&gt;

&lt;p&gt;manifest -&amp;gt; registry&lt;/p&gt;

&lt;p&gt;plugin = bundle&lt;/p&gt;

&lt;p&gt;定义在 org.eclipse.osgi and org.eclipse.core.runtime&lt;/p&gt;

&lt;p&gt;定义插件结构，实现加载策略&lt;/p&gt;

&lt;p&gt;找到并执行应用，维护plugin registry, extension and extension point&lt;/p&gt;

&lt;p&gt;提供一些基础设施：日志，调试，adapter，preference store，concurrency基础设施&lt;/p&gt;

&lt;p&gt;Bundle&lt;/p&gt;

&lt;p&gt;BundleActivator&lt;br /&gt;
  start(BundleContext)&lt;br /&gt;
  stop(BundleContext)&lt;/p&gt;

&lt;p&gt;BundleEvent&lt;br /&gt;
BundleContext&lt;/p&gt;

&lt;p&gt;Extension ExtensionPoint ExtensionRegistry&lt;/p&gt;

&lt;p&gt;ConfigurationElement&lt;/p&gt;

&lt;p&gt;Platform&lt;/p&gt;

&lt;h2 id=&quot;workbench&quot;&gt;Workbench&lt;/h2&gt;

&lt;p&gt;Workbench(WorkbenchWindow)&lt;/p&gt;

&lt;p&gt;Ppage: for group part&lt;/p&gt;

&lt;p&gt;Workbench&lt;br /&gt;
  - Page&lt;br /&gt;
    - MenuBar&lt;br /&gt;
    - ToolBar&lt;br /&gt;
    - StausLine&lt;br /&gt;
    - ShotcutBar&lt;/p&gt;

&lt;p&gt;Perspective:&lt;br /&gt;
  views, layout, actions&lt;/p&gt;

&lt;p&gt;切换perspective时,editor不受影响&lt;/p&gt;

&lt;p&gt;Part&lt;br /&gt;
1. ViewPart&lt;br /&gt;
2. EditPart: save-close lifecycle&lt;/p&gt;

&lt;p&gt;View and Editor&lt;/p&gt;

&lt;p&gt;createPartControl&lt;br /&gt;
setFocus&lt;br /&gt;
dispose&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/eclipse/review.html</link>
        <guid isPermaLink="true">http://bencode.github.io/eclipse/review.html</guid>
        
        
        <category>eclipse</category>
        
      </item>
    
      <item>
        <title>iframe自适应高度</title>
        <description>&lt;p&gt;这两天项目中需要，上网搜了一把找到一大堆，最后使用下面的方案。&lt;br /&gt;
发现一个问题，就是onload时再触发有点太慢了，可以改用domready等事件，还好我这个自适应不在线上使用，只存在开发环境下的mock。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var fn = function() {
  try {
    var bHeight = iframe.contentWindow.document.body.scrollHeight;
    var dHeight = iframe.contentWindow.document.documentElement.scrollHeight;
    var height = Math.max(bHeight, dHeight);
    if (height) {
      iframe.height = height;
    }
    setTimeout(fn, 200);
  } catch (e) {
    console.error(e);
  }
};

fn();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;http://www.cnblogs.com/MaxIE/archive/2008/08/13/1266597.html&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/web/iframe-autoresize.html</link>
        <guid isPermaLink="true">http://bencode.github.io/web/iframe-autoresize.html</guid>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>［译］Shadow DOM 101</title>
        <description>&lt;p&gt;正在进行中…&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/translation/shadow-dom-101.html</link>
        <guid isPermaLink="true">http://bencode.github.io/translation/shadow-dom-101.html</guid>
        
        
        <category>translation</category>
        
      </item>
    
      <item>
        <title>child_process的同步方法execSync</title>
        <description>&lt;p&gt;node中通过child_processt和shell交互很方便，只是0.10.x版本中的exec没有同步版本，让做“脚本”用途的node写起来很是麻烦。&lt;br /&gt;
而在0.11.12版本后添加了execSync方法解决了这个问题。&lt;/p&gt;

&lt;p&gt;首先node版本要到0.11.12以上才有这个api，可以使用n进行快速安装&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;sudo npm install -g n
n 0.11.14   // 到目前为止，已有0.11.14版了
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后就可以使用了&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var exec = require(&#39;child_process&#39;).execSync;
exec(&#39;git log&#39;, { encoding: &#39;utf-8&#39; });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行一下，就发现控制台有git log的输出了 &lt;br /&gt;
上面在options中指定了encoding, 如果不指定，返回的是一个&lt;code&gt;Buffer&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 11 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/nodejs/exec-sync.html</link>
        <guid isPermaLink="true">http://bencode.github.io/nodejs/exec-sync.html</guid>
        
        
        <category>nodejs</category>
        
      </item>
    
      <item>
        <title>mruby源码阅读1</title>
        <description>&lt;p&gt;include/mrbconf.h&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;define FALSE 0
define TRUE 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;include/mrb/value.h&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sun, 09 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/codereading/ruby/mruby-01.html</link>
        <guid isPermaLink="true">http://bencode.github.io/codereading/ruby/mruby-01.html</guid>
        
        
        <category>codereading</category>
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Polymer学习笔记 - HTML5 Template</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.html5rocks.com/zh/tutorials/webcomponents/template/&quot;&gt;参考资料&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;特性检测&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function supportTemplate() {
  return &#39;content&#39; in document.createElement(&#39;template&#39;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-1&quot;&gt;声明模板内容&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template id=&quot;mytemplate&quot;&amp;gt;
  &amp;lt;img src=&quot;&quot; alt=&quot;great image&quot;&amp;gt;
  &amp;lt;div class=&quot;comment&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-2&quot;&gt;特性&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;模板内容在激活前不会被渲染&lt;/li&gt;
  &lt;li&gt;处于模板中的内容无副作用&lt;/li&gt;
  &lt;li&gt;处理模板中的内容不在文档中&lt;/li&gt;
  &lt;li&gt;模板可以放置在任意位置，包括&lt;code&gt;&amp;lt;head&amp;gt;, &amp;lt;body&amp;gt;, &amp;lt;frameset&amp;gt;&lt;/code&gt;&lt;br /&gt;
  并且任何能够出现在以上节点中的内容都可以出现在&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;中&lt;br /&gt;
  template能够安全地出现在html解析器不允许出现的位置，几乎可以作为任何内容的子节点，如&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section-3&quot;&gt;激活&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var t = document.querySelector(&#39;#mytemplate&#39;)
t.content.querySelector(&#39;img&#39;).src = &#39;logo.png&#39;;

var clone = document.importNode(t.content, true);
document.body.appendChild(clone);
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/reading/polymer/template.html</link>
        <guid isPermaLink="true">http://bencode.github.io/reading/polymer/template.html</guid>
        
        
        <category>reading</category>
        
        <category>polymer</category>
        
      </item>
    
      <item>
        <title>Polymer学习笔记 - Shadow DOM</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;基本使用&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var el = document.createElement(&#39;div&#39;)
var shadow = el.createShadowRoot()
shadow.innerHTML = &#39;&amp;lt;content select=&quot;q&quot;&amp;gt;&amp;lt;/content&amp;gt;&#39;
document.body.appendChild(el)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;subtrees&quot;&gt;subtrees&lt;/h2&gt;

&lt;p&gt;一个节点承载三棵树： light DOM, shadow DOM 和 composed DOM&lt;/p&gt;

&lt;p&gt;组件提供者创建shadow DOM, 使用者提供light DOM， 然后浏览器结合两者成为composed DOM进行渲染。 &lt;br /&gt;
shadow DOM不能被用户访问到，它有自己的空间。 &lt;br /&gt;
这本质上是一种封装和开放，设计上的艺术。&lt;/p&gt;

&lt;h2 id=&quot;polyfill&quot;&gt;Polyfill&lt;/h2&gt;

&lt;p&gt;原生不支持ShadowDom的浏览器，可以使用ShadowDOMPolyfill来包装，只是即使这样，也有若干限制。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;事件重定向&lt;/h3&gt;

&lt;h3 id=&quot;section-2&quot;&gt;已知的缺陷&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;css封装性&lt;/li&gt;
  &lt;li&gt;Object.prototype.toString和原生支持的返回不一致&lt;/li&gt;
  &lt;li&gt;document, window, document.body, document.head等不可配置，不能被重写&lt;/li&gt;
  &lt;li&gt;跨window, frame未实现&lt;/li&gt;
  &lt;li&gt;:host()伪类选择器最多支持1层嵌套的括号选择器&lt;br /&gt;
例：&lt;code&gt;:host(.zot)&lt;/code&gt; and &lt;code&gt;:host(.zot:not(.bar))&lt;/code&gt; 支持, &lt;br /&gt;
  &lt;code&gt;:host(.zot:not(.bar:nth-child(2)))&lt;/code&gt; 不支持&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[资料]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.polymer-project.org/platform/shadow-dom.html&quot;&gt;https://www.polymer-project.org/platform/shadow-dom.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://dvcs.w3.org/hg/webcomponents/raw-file/57f8cfc4a7dc/explainer/index.html#shadow-dom-section&quot;&gt;https://dvcs.w3.org/hg/webcomponents/raw-file/57f8cfc4a7dc/explainer/index.html#shadow-dom-section&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/&quot;&gt;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/&quot;&gt;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-301/&quot;&gt;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-301/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/reading/polymer/shadow-dom.html</link>
        <guid isPermaLink="true">http://bencode.github.io/reading/polymer/shadow-dom.html</guid>
        
        
        <category>reading</category>
        
        <category>polymer</category>
        
      </item>
    
      <item>
        <title>Polymer学习笔记 - Helper Methods</title>
        <description>&lt;h2 id=&quot;html-imports&quot;&gt;动态Html imports&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Polymer.import(urls, callback)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;dynamic-element&amp;gt;
  I&#39;m just an unknown element.
&amp;lt;/dynamic-element&amp;gt;

&amp;lt;script&amp;gt;
  var button = document.querySelector(&#39;button&#39;)
  button.addEventListener(&#39;click&#39;, function() {
    Polymer.import([&#39;dynamic-element.html&#39;], function() {
      document.querySelector(&#39;dynamic-element&#39;).description = &#39;a dynamic import&#39;
    })
  });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;mixins&quot;&gt;mixins&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Polymer.mixin(target, obj1 [, obj2, ..., objN ] )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section&quot;&gt;强制注册元素&lt;/h2&gt;

&lt;p&gt;默认情况下，Polymer会等待所有元素ready, 再进行注册和更新。 &lt;br /&gt;
如果一个元素没有调用Polymer构造函数，也没有使用noscript属性，则它会一直等待。 &lt;br /&gt;
Polymer.waitingFor帮助方法返回一个阻塞状态的polymer-element列表。  &lt;br /&gt;
Polymer.forceReady通知Polymer强制注册所有已ready的元素，忽略未完成的元素。&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Nov 2014 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/reading/polymer/helper-methods.html</link>
        <guid isPermaLink="true">http://bencode.github.io/reading/polymer/helper-methods.html</guid>
        
        
        <category>reading</category>
        
        <category>polymer</category>
        
      </item>
    
  </channel>
</rss>
