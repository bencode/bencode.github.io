<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bencode@编码</title>
    <description></description>
    <link>http://bencode.github.io/</link>
    <atom:link href="http://bencode.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 08 Nov 2014 11:43:29 +0800</pubDate>
    <lastBuildDate>Sat, 08 Nov 2014 11:43:29 +0800</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Polymer 学习记录(Helper Methods)</title>
        <description>&lt;h2 id=&quot;html-imports&quot;&gt;动态Html imports&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Polymer.import(urls, callback)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&amp;lt;dynamic-element&amp;gt;
  I&#39;m just an unknown element.
&amp;lt;/dynamic-element&amp;gt;

&amp;lt;script&amp;gt;
  var button = document.querySelector(&#39;button&#39;)
  button.addEventListener(&#39;click&#39;, function() {
    Polymer.import([&#39;dynamic-element.html&#39;], function() {
      document.querySelector(&#39;dynamic-element&#39;).description = &#39;a dynamic import&#39;
    })
  });
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;mixins&quot;&gt;mixins&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Polymer.mixin(target, obj1 [, obj2, ..., objN ] )
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section&quot;&gt;强制注册元素&lt;/h2&gt;

&lt;p&gt;默认情况下，Polymer会等待所有元素ready, 再进行注册和更新。 &lt;br /&gt;
如果一个元素没有调用Polymer构造函数，也没有使用noscript属性，则它会一直等待。 &lt;br /&gt;
Polymer.waitingFor帮助方法返回一个阻塞状态的polymer-element列表。  &lt;br /&gt;
Polymer.forceReady通知Polymer强制注册所有已ready的元素，忽略未完成的元素。&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Nov 2011 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/polymer/learning/helper-methods.html</link>
        <guid isPermaLink="true">http://bencode.github.io/polymer/learning/helper-methods.html</guid>
        
        
        <category>polymer</category>
        
        <category>learning</category>
        
      </item>
    
      <item>
        <title>Polymer 学习记录(Data Binding)</title>
        <description>&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;For Polymer elements, &lt;strong&gt;the model is always the element itself&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;polymer-element name=&quot;name-tag&quot;&amp;gt;
  &amp;lt;template&amp;gt;
    This is &amp;lt;b&amp;gt;{ {owner}}&amp;lt;/b&amp;gt;&#39;s name-tag element.
  &amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;document.querySelector(&#39;name-tag&#39;).owner = &#39;June&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;template&quot;&gt;&amp;lt;template&amp;gt;&lt;/h3&gt;

&lt;p&gt;在Polymer中，使用template定义自定义元素的shadow dom&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;数据绑定和事件处理&lt;/h3&gt;

&lt;p&gt;在事件绑定方法中可以取得事件源节点和模型&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template repeat=&quot;{ {s in stories}}&quot;&amp;gt;
  &amp;lt;li on-click={ {selectStory}}&amp;gt;{ {s.headline}}&amp;lt;/li&amp;gt;

selectStory: function(e, detail, sender) {
  var story = e.target.templateInstance.model.s
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;types-of-bindings&quot;&gt;Types of bindings&lt;/h2&gt;

&lt;p&gt;有多种绑定数据和模板的方式&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;单模板实例&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;template bind=&quot;{ {person}}&quot;&amp;gt;
    This template can bind to the person object’s properties, like { {name}}.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为了方便可以创建&lt;em&gt;name scope&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template bind=&quot;persion as p&quot;&amp;gt;
  ... like { {p.name}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-2&quot;&gt;循环模板&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template repeat=&quot;{ {array}}&quot;&amp;gt;
  Creates an instance with { {}} bindings  for every element in the array collection.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用空表达式&lt;code&gt;{ {}}&lt;/code&gt;表示当前对象&lt;/p&gt;

&lt;p&gt;repeat也支持&lt;em&gt;name scope&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template repeat=&quot;{ {user, userIndex in users}}&quot;&amp;gt;
  { {user.name}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;repeat可以省略&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;this.items = [
  { name: &#39;Milk&#39; },
  ...
]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template bind=&quot;{ {item}}&quot;&amp;gt;
  &amp;lt;p&amp;gt;items count: { {length}}
  &amp;lt;template repeat&amp;gt;
    &amp;lt;li&amp;gt;{ {name}}&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-3&quot;&gt;条件模板&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template if=&quot;{ {conditionalValue}}&quot;&amp;gt;
  Binds if and only if conditionalValue is truthy.
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以混合使用&lt;em&gt;repeat&lt;/em&gt;和&lt;em&gt;if&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template repeat=&quot;{ {item in list.items}}&quot; if=&quot;{ {list.showItems}}&quot;&amp;gt;
  &amp;lt;li&amp;gt;{ {item.name}}&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-4&quot;&gt;引用模板&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template id=&quot;myTemplate&quot;&amp;gt;
  这个模板可以被其他地方引用
&amp;lt;/template&amp;gt;

&amp;lt;template bind ref=&quot;myTemplate&quot;&amp;gt;
  这里的内容就忽略啦，使用myTemplate模板内容了
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;node-binding&quot;&gt;Node Binding&lt;/h3&gt;

&lt;p&gt;node binding用于关联节点和模型&lt;/p&gt;

&lt;p&gt;如何绑定依赖于节点类型和绑定名称，绑定名称和绑定在节点中出现的位置有关系&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;textContent 如 &lt;code&gt;&amp;lt;span&amp;gt;{ {someText}}&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;styleName 如 &lt;code&gt;&amp;lt;span style=&quot;{ {someStyles}}&quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-5&quot;&gt;文本绑定&lt;/h4&gt;

&lt;p&gt;出现在节点中间的绑定就是textContent binding&lt;/p&gt;

&lt;p&gt;比如 &lt;code&gt;&amp;lt;p&amp;gt;This paragraph has some { {adjective}} text.&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;textContent绑定是单向的，改变模型，会改变内容, 但反之不会&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;属性绑定&lt;/h4&gt;

&lt;p&gt;如何进行属性绑定和节点类型和属性名有关&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;大部分标准dom的属性绑定都是单向的，比如style&lt;/li&gt;
  &lt;li&gt;表单元素，支持双向绑定&lt;/li&gt;
  &lt;li&gt;polymer element的公共属性是支持双向绑定的&lt;/li&gt;
  &lt;li&gt;自定义元素可以实现自己的绑定方式&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-7&quot;&gt;表单元素值的绑定&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;input元素的value和checked&lt;/li&gt;
  &lt;li&gt;options元素的value&lt;/li&gt;
  &lt;li&gt;select元素的selectIndex和value&lt;/li&gt;
  &lt;li&gt;textarea的value&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-8&quot;&gt;条件属性&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;span hidden?=&quot;{ {isHidden}}&quot;&amp;gt;This may or may not be hidden.&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-9&quot;&gt;一次性绑定&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type=&quot;text&quot; value=&quot;[[ obj.value ]]&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-10&quot;&gt;表达式&lt;/h2&gt;

&lt;h3 id=&quot;section-11&quot;&gt;行为和限制&lt;/h3&gt;

&lt;p&gt;表达式是javascript的子集&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;表达式用来处理简单的逻辑，不应该把复杂的逻辑放在表达式中&lt;/li&gt;
  &lt;li&gt;表达式从来不是使用eval执行，也不能访问global变量。&lt;/li&gt;
  &lt;li&gt;不能使用表达式插入HTML, 为了防止xss，默认对输出值进行html escape&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-12&quot;&gt;执行&lt;/h3&gt;

&lt;p&gt;表达式可以使用在以下三种情况 &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ {expression}}

[[expression]]

computed: {
  name: expression
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;scope&quot;&gt;上下文(scope)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;bind, repeat, if属性表达式使用的是父模板的作用域&lt;/li&gt;
  &lt;li&gt;最外层模板中表达式和computed属性表达式使用的作用域都是元素本身&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-13&quot;&gt;嵌套作用域规则&lt;/h3&gt;

&lt;p&gt;对于name scope模板，其父作用域是可见的，否则父作用域不可见&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;!-- outermost template -- element&#39;s properties available --&amp;gt;
  &amp;lt;template bind=&quot;{ {organization as organization}}&quot;&amp;gt;
    &amp;lt;!-- organization.* available --&amp;gt;
    &amp;lt;template bind=&quot;{ {organization.contact as contact}}&quot;&amp;gt;
      &amp;lt;!-- organization.* &amp;amp; contact.* available --&amp;gt;
      &amp;lt;template bind=&quot;{ {contact.address}}&quot;&amp;gt;
        &amp;lt;!-- only properties of address are available --&amp;gt;
        &amp;lt;template bind=&quot;{ {streetAddress as streetAddress}}&quot;&amp;gt;
          &amp;lt;!-- streetAddress.* and properties of address are available.
               NOT organization.* or contact.* --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-14&quot;&gt;过滤器&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{ {user | formatUserName}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的方式，如果user中的字段变化了，表达式不会重新求值,  &lt;br /&gt;
因为表达式不知道应该监听什么属性变化，所以得主动告诉它。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;{ { {firstName: user.firstName, lastName: user.lastName} | formatUserName}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;tokenlist-styleobject&quot;&gt;tokenList, styleObject&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&quot;{ }&quot;  
&amp;lt;div style=&quot;{ {styles | styleObject}}&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-15&quot;&gt;自定义过滤器&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Polymer(&#39;greeting-tag&#39;, {
  ...
  toUpperCase: function(value) {
    return value.toUpperCase()
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要处理双向绑定的过滤器：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;toUpperCase: {
  toDOM: function(value) {
    return value.toUpperCase()
  },
  toModel: function(value) {
    return value.toLowerCase()
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-16&quot;&gt;过滤器参数&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{ {myNumber | toFixed(2)}}

toFixed: function(value, precision) {
  return Number(value).toFixed(precision)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;chaining-filter&quot;&gt;chaining filter&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{ {myNumber | toHex | toUpperCase}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-17&quot;&gt;自定义全局过滤器&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;PolymerExpressions.prototype.uppercase = function(input) {
  return input.toUpperCase()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;全局过滤器使用html import方式载入&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;link rel=&quot;import&quot; href=&quot;uppercase-filter.html&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-18&quot;&gt;兼容性相关的注意事项&lt;/h2&gt;

&lt;p&gt;不支持template的浏览器，将不支持template节点存在于某些元素里，比如select和table&lt;/p&gt;

&lt;p&gt;Polymer采用变通的方式&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;table&amp;gt;
  &amp;lt;tr template repeat=&quot;{ {tr in rows}}&quot;&amp;gt;
    &amp;lt;td&amp;gt;Hello&amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;select的例子&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;polymer-element name=&quot;my-select&quot;&amp;gt;
  &amp;lt;template&amp;gt;
    &amp;lt;select&amp;gt;
      &amp;lt;option template repeat=&quot;{ {options}}&quot;&amp;gt;{ {}}&amp;lt;/option&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有些浏览器对属性值中有特殊字符不支持，如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;img src=&quot;/users/{ {id}}.jpg&quot; /&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以在属性前加_&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;img _src=&quot;/users/{ {id}}.jpg&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-19&quot;&gt;数据绑定如何工作&lt;/h2&gt;

&lt;p&gt;Polymer在数据绑定时，不是像传统的ajax那样，会将整片dom进行替换，  &lt;br /&gt;
而是进行&lt;strong&gt;最小的必要的dom变化&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;table&amp;gt;
    &amp;lt;template repeat=&quot;{ {item in items}}&quot;&amp;gt;
      &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt; { {item.name}} &amp;lt;/td&amp;gt;&amp;lt;td&amp;gt; { {item.count}} &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
    &amp;lt;/template&amp;gt;
   &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt; Bass &amp;lt;/td&amp;gt;&amp;lt;td&amp;gt; 7 &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;  
   &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt; Catfish &amp;lt;/td&amp;gt;&amp;lt;td&amp;gt; 8 &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt; 
   &amp;lt;tr&amp;gt;&amp;lt;td&amp;gt; Trout &amp;lt;/td&amp;gt;&amp;lt;td&amp;gt; 0 &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;比如现在你对items进行重新排序，polymer不会创建和销毁dom，仅仅也是重新排列一下dom&lt;/p&gt;

&lt;p&gt;如果改变了一个item的count，则只会改变一个td中的值&lt;/p&gt;

&lt;h3 id=&quot;section-20&quot;&gt;数据绑定如何跟踪每个模板实例&lt;/h3&gt;

&lt;p&gt;当模板创建一个或多个实例，它会将实例插入紧跟着模板的位置，并且跟踪每个实例最后节点  &lt;br /&gt;
这样第一个实例就是模板结尾开始到第一个实例结尾，后面的依旧。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template repeat=&quot;{ {item in myList}}&quot;&amp;gt;
  &amp;lt;img&amp;gt;
  &amp;lt;span&amp;gt;{ {item.name}}&amp;lt;/span&amp;gt;
&amp;lt;/template&amp;gt;                  
  &amp;lt;img&amp;gt;
  &amp;lt;span&amp;gt;foo&amp;lt;/span&amp;gt;   ⇐ terminating node in template instance
  &amp;lt;img&amp;gt;
  &amp;lt;span&amp;gt;bar&amp;lt;/span&amp;gt;   ⇐ terminating node in template instance
  &amp;lt;img&amp;gt;
  &amp;lt;span&amp;gt;baz&amp;lt;/span&amp;gt;   ⇐ terminating node in template instance
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-21&quot;&gt;直接操作模板生成的节点&lt;/h3&gt;

&lt;p&gt;正常情况下，你不应该直接去修改模板生成的dom。 &lt;br /&gt;
非要修改，根据上面的原理，只要不修改最后一个节点，那问题是不大的。 &lt;br /&gt;
所以如果要修改，一般来说嵌套一层，只修改里面的dom节点。 &lt;br /&gt;
但是当修改模型后，修改的dom可能会被替换，因为双向数据绑定只针对于表单域。&lt;/p&gt;

&lt;h2 id=&quot;polymer-element&quot;&gt;在Polymer Element之外使用数据绑定&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;使用auto-binding template&lt;/li&gt;
  &lt;li&gt;可以直接使用&lt;a href=&quot;https://github.com/polymer/TemplateBinding&quot;&gt;TemplateBinding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;auto-binding-template&quot;&gt;使用auto-binding template可以享有以下特性&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;完整的数据绑定功能&lt;/li&gt;
  &lt;li&gt;申明式事件映射&lt;/li&gt;
  &lt;li&gt;自动节点查找&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;template-binding&quot;&gt;Template Binding&lt;/h2&gt;

&lt;p&gt;Polymer的Template Binding扩展了Html TemplateElement, 让它支持数据绑定的方式来创建，管理和移除内容。&lt;/p&gt;

&lt;p&gt;可以独立使用Template Binding&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template id=&quot;greeting&quot; bind=&quot;{ { salutations }}&quot;&amp;gt;
  Hello, { {who}} - { {what}}
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
  var t = document.querySelector(&#39;#greeting&#39;)
  var model = {
    salutations: { what: &#39;GoodBye&#39;, who: &#39;Imperative&#39; }
  }
  t.model = model   // &amp;lt;-- 设置模型
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;nodebind&quot;&gt;Node.bind()&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/polymer/NodeBind&quot;&gt;Node.bind&lt;/a&gt; 用于数据绑定，可以将节点绑定到数据属性，它也可以独立的使用&lt;/p&gt;

&lt;h3 id=&quot;section-22&quot;&gt;基本使用&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var obj = {
  path: {
    to: {
      value: &#39;hi&#39;
    }
  }
}

var textNode = document.createTextNode(&#39;mytext&#39;)
textNode.bind(&#39;textContent&#39;, new PathObserver(obj, &#39;path.to.value&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-23&quot;&gt;绑定类型&lt;/h3&gt;

&lt;p&gt;以下类型可以进行双向绑定&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Text node - textContent&lt;/li&gt;
  &lt;li&gt;HtmlInputElement - value &amp;amp; checked&lt;/li&gt;
  &lt;li&gt;HtmlTextareaElement - value&lt;/li&gt;
  &lt;li&gt;HtmlSelectElement - value 和 selectedIndex&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以其他的都绑定到元素属性&lt;/p&gt;

&lt;h3 id=&quot;section-24&quot;&gt;自定义元素的绑定&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;MyFancyHTMLWidget.prototype.bind = function(name, observable, oneTime) {
  if (name == &#39;myBinding&#39;) {
    // interpret the binding meaning
    // if oneTime is false, this should return an object which
    // has a close() method.
    // this will allow TemplateBinding to clean up this binding
    // when the instance containing it is removed.
  } else {
    return HTMLElement.prototype.bind.call(
      this, name, observable, oneTime
    )
  }
}
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Mon, 07 Nov 2011 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/polymer/learning/data-binding.html</link>
        <guid isPermaLink="true">http://bencode.github.io/polymer/learning/data-binding.html</guid>
        
        
        <category>polymer</category>
        
        <category>learning</category>
        
      </item>
    
      <item>
        <title>Polymer 学习记录(API Developer Guide)</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.polymer-project.org/docs/polymer/polymer.html&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;help make developing web components much easier&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;申明&lt;/h2&gt;

&lt;p&gt;使用&lt;code&gt;&amp;lt;polymer-element&amp;gt;&lt;/code&gt;申明组件&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;属性&lt;/h2&gt;

&lt;p&gt;有一些保留的attributes用于描述组件  &lt;br /&gt;
如：&lt;em&gt;name, attributes, extends, noscript, constractor&lt;/em&gt;&lt;br /&gt;
其他的属性将会自动应用到组件  &lt;br /&gt;
属性名的大小写是无关紧要的，polymer会聪明地应用到实际对象上&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;注册&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Polymer(tag-name, prototype)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;custom-element-prototype-chain&quot;&gt;Custom element prototype chain&lt;/h2&gt;

&lt;p&gt;Polymer对象属性和方法的继承链：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;prototype对象中定义的属性和方法&lt;/li&gt;
  &lt;li&gt;Polymer定义的基本属性和方法&lt;/li&gt;
  &lt;li&gt;HTML Element的属性和方法&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以为了避免冲突，请不要定义&lt;em&gt;id, children, focus, title, hidden&lt;/em&gt;等属性和方法&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;结果不可预料 ？ &amp;lt;－－ 文档中是这么说的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-3&quot;&gt;属性的引用&lt;/h2&gt;

&lt;p&gt;在模板中 &lt;code&gt;$.globals.firstName&lt;/code&gt;  &lt;br /&gt;
在js中 &lt;code&gt;this.$.globals.firstName&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;生命周期&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;{
  created: function() {},  
  ready: function() {},  
  attached: function() {},
  domReady: function() {},  
  detached: function() {},  
  attributeChanged: function(name, oldValue, newValue) {}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;polymer-ready&quot;&gt;polymer-ready&lt;/h2&gt;

&lt;p&gt;polymer解析定义，更新以及载入资源都是异步的，所以需要一个类似domready的事件来防止&lt;a href=&quot;http://en.wikipedia.org/wiki/Flash_of_unstyled_content&quot;&gt;FOUC&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;$(window).on(&#39;polymer-ready&#39;, function() {
  var xfoo = $(&#39;x-foo&#39;)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-5&quot;&gt;公共属性&lt;/h2&gt;

&lt;p&gt;有两种方式申明公共属性&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;polymer-element节点中使用attributes属性 (推荐)&lt;/li&gt;
  &lt;li&gt;polymer构造器中使用publish&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在节点中申明的好处是，一眼就能看出有哪些公共属性。   &lt;br /&gt;
不过当属性很多，需要默认值，以及使用&lt;em&gt;reflect&lt;/em&gt;特性时，使用js的方式还是更方便。&lt;/p&gt;

&lt;p&gt;默认属性是&lt;em&gt;undefined&lt;/em&gt;, 可以使用以下两种方式申明默认值&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;polymer-element name=&quot;x-foo&quot; attributes=&quot;bar&quot;&amp;gt;
  &amp;lt;script&amp;gt;
    Polymer({
      bar: false
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更简洁的方式&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;polymer-element name=&quot;x-foo&quot;&amp;gt;
  &amp;lt;script&amp;gt;
    Polymer({
      publish: {
        bar: false
      }
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;对于属性类型为对象和数组的，需要在created回调方法中设置默认值，以保证每个组件有独立的实例数据&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;polymer-element name=&quot;x-defaults&quot; attributes=&quot;settings&quot;&amp;gt;
  &amp;lt;script&amp;gt;
    Polymer({
      created: function() {
        this.settings = {
          textColor: &#39;blue&#39;
        }
      }
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;property-reflection&quot;&gt;property reflection&lt;/h2&gt;

&lt;p&gt;设置对象属性时，会自动传递到节点&lt;/p&gt;

&lt;p&gt;&lt;code&gt;this.name = &quot;Joe&quot;  --&amp;gt; this.setAttribute(&#39;name&#39;, &#39;Joe&#39;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;由于双向绑定机制，这个特性大多数情况下用不到，所以默认是关闭的&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;property reflection和双向数据绑定不是一回事&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-6&quot;&gt;数据绑定&lt;/h2&gt;

&lt;p&gt;核心特点，有整整一章介绍哦：）&lt;/p&gt;

&lt;h2 id=&quot;computed-properties&quot;&gt;Computed properties&lt;/h2&gt;

&lt;p&gt;可以使用Polymer Expression来定义属性，这个属性也可以参于Data Binding哦。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;input type=&quot;number&quot; value=&quot;{ {num}}&quot; ...
  &amp;lt;em&amp;gt;{ {num}}^1 = { {square}}&amp;lt;/em&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
  Polymer({
    num: 2,
    computed: {
      square: &#39;num * num&#39;   //  &amp;lt;-- Polymer Expression
    }
  })
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-7&quot;&gt;申明式事件映射&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;input on-click=&quot;{ {buttonClick}}&quot;

&amp;lt;script&amp;gt;
  Polymer({
    buttonClick: function(event, detail, sender) {
    }
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-8&quot;&gt;属性监听&lt;/h2&gt;

&lt;h3 id=&quot;section-9&quot;&gt;基于约定的属性监听机制&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;polymer-element properties=&quot;better&quot;&amp;gt;

  &amp;lt;script&amp;gt;
    Polymer({
      better: &#39;&#39;,
      betterChanged: function(oldValue, newValue) {
      }
    })
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-10&quot;&gt;自定义的属性监听&lt;/h3&gt;

&lt;p&gt;有时候基于约定还搞不定时，需要使用&lt;code&gt;observe&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Polymer({
  observe {
    foo: &#39;validate&#39;,
    bar: &#39;validate&#39;
  },

  validate: function(oldValue, newValue) {
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-11&quot;&gt;自动节点查找&lt;/h2&gt;

&lt;p&gt;有id的dom节点引用，可以通过&lt;code&gt;this.$.id&lt;/code&gt; 引用得到&lt;/p&gt;

&lt;h2 id=&quot;section-12&quot;&gt;自定义事件&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Polymer({
  onClick: function() {
    this.fire(&#39;ouch&#39;, { ... })
  }
})


$(&#39;ouch-button&#39;).on(&#39;ouch&#39;, function(e) {
  e.type
  e.detail
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-13&quot;&gt;扩展&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;polymer-element name=&quot;polymer-coller&quot; extends=&quot;polymer-cool&quot;&amp;gt;
  &amp;lt;template&amp;gt;
    &amp;lt;shadow&amp;gt;&amp;lt;/shadow&amp;gt;  &amp;lt;!-- 调用父类模板 --&amp;gt;
  &amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;调用父类的方法&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Polymer({
  praise: &#39;cool&#39;,
  makeCoolest: function() {
    this.super()  // 调用父类方法
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是如何实现的?  arguments.callee.caller ?&lt;/p&gt;

&lt;h2 id=&quot;section-14&quot;&gt;内置方法&lt;/h2&gt;

&lt;h3 id=&quot;dom&quot;&gt;监听原生dom子节点变化&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;onMutation(element, callback)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-15&quot;&gt;处理异步任务&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Polymer中到处都是异步，变化会先被收集，然后一次性处理，而不是每次都执行。&lt;br /&gt;
  这样就可以进行优化，并且防止重复的工作，并且减少不必要的FOUC&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;this.async(function() {
  this.foo = 3  // this会自动绑定到节点对象
}, null, 1000)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-16&quot;&gt;延迟任务&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;this.responseChanged = function() {
  this.job(&#39;job1&#39;, function() {
    this.fire(&#39;done&#39;)
  }, 5000)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;job可以避免重复操作，类似于我实现的schedule&lt;/p&gt;

&lt;h2 id=&quot;section-17&quot;&gt;高级主题&lt;/h2&gt;

&lt;h3 id=&quot;section-18&quot;&gt;一些方法&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;this.cancelUnbindAll()
unbindAll()
preventDispose
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-19&quot;&gt;数据变化如何传递&lt;/h3&gt;

&lt;p&gt;如果Object.observe()支持，则使用它来监听属性变化&lt;br /&gt;
如果不支持，则使用Platform.flash()来轮询检查变量&lt;/p&gt;

&lt;h3 id=&quot;polymer-element&quot;&gt;Polymer Element如何初始化&lt;/h3&gt;

&lt;p&gt;从性能上考虑，element在created时，如果不在main document内，避免创建ShadowDOM, 进行事件监听，监控属性变化。  &lt;br /&gt;
这在行为上类似原生的img和video&lt;/p&gt;

&lt;p&gt;在以下场景，element将会初始化&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;当在main document中创建, document.defaultView存在&lt;/li&gt;
  &lt;li&gt;attached&lt;/li&gt;
  &lt;li&gt;当它的shadowRoot节点被初始化时&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;alwaysPrepare属性可以强制初始化&lt;/p&gt;

&lt;h3 id=&quot;section-20&quot;&gt;路径问题&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;this.resolvePath(x-foo.png)&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 06 Nov 2011 00:00:00 +0800</pubDate>
        <link>http://bencode.github.io/polymer/learning/api-developer-guide.html</link>
        <guid isPermaLink="true">http://bencode.github.io/polymer/learning/api-developer-guide.html</guid>
        
        
        <category>polymer</category>
        
        <category>learning</category>
        
      </item>
    
  </channel>
</rss>
